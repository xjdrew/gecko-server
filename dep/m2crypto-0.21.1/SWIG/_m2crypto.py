# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('__m2crypto', [dirname(__file__)])
        except ImportError:
            import __m2crypto
            return __m2crypto
        if fp is not None:
            try:
                _mod = imp.load_module('__m2crypto', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    __m2crypto = swig_import_helper()
    del swig_import_helper
else:
    import __m2crypto
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


OPENSSL_VERSION_NUMBER = __m2crypto.OPENSSL_VERSION_NUMBER
OPENSSL_VERSION_TEXT = __m2crypto.OPENSSL_VERSION_TEXT
OPENSSL_VERSION_PTEXT = __m2crypto.OPENSSL_VERSION_PTEXT
SHLIB_VERSION_HISTORY = __m2crypto.SHLIB_VERSION_HISTORY
SHLIB_VERSION_NUMBER = __m2crypto.SHLIB_VERSION_NUMBER
MAC_OS_X_VERSION_10_0 = __m2crypto.MAC_OS_X_VERSION_10_0
MAC_OS_X_VERSION_10_1 = __m2crypto.MAC_OS_X_VERSION_10_1
MAC_OS_X_VERSION_10_2 = __m2crypto.MAC_OS_X_VERSION_10_2
MAC_OS_X_VERSION_10_3 = __m2crypto.MAC_OS_X_VERSION_10_3
MAC_OS_X_VERSION_10_4 = __m2crypto.MAC_OS_X_VERSION_10_4
MAC_OS_X_VERSION_10_5 = __m2crypto.MAC_OS_X_VERSION_10_5
MAC_OS_X_VERSION_10_6 = __m2crypto.MAC_OS_X_VERSION_10_6
MAC_OS_X_VERSION_10_7 = __m2crypto.MAC_OS_X_VERSION_10_7
MAC_OS_X_VERSION_10_8 = __m2crypto.MAC_OS_X_VERSION_10_8
MAC_OS_X_VERSION_MIN_REQUIRED = __m2crypto.MAC_OS_X_VERSION_MIN_REQUIRED
MAC_OS_X_VERSION_MAX_ALLOWED = __m2crypto.MAC_OS_X_VERSION_MAX_ALLOWED
class STACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = __m2crypto.STACK_num_set
    __swig_getmethods__["num"] = __m2crypto.STACK_num_get
    if _newclass:num = _swig_property(__m2crypto.STACK_num_get, __m2crypto.STACK_num_set)
    __swig_setmethods__["data"] = __m2crypto.STACK_data_set
    __swig_getmethods__["data"] = __m2crypto.STACK_data_get
    if _newclass:data = _swig_property(__m2crypto.STACK_data_get, __m2crypto.STACK_data_set)
    __swig_setmethods__["sorted"] = __m2crypto.STACK_sorted_set
    __swig_getmethods__["sorted"] = __m2crypto.STACK_sorted_get
    if _newclass:sorted = _swig_property(__m2crypto.STACK_sorted_get, __m2crypto.STACK_sorted_set)
    __swig_setmethods__["num_alloc"] = __m2crypto.STACK_num_alloc_set
    __swig_getmethods__["num_alloc"] = __m2crypto.STACK_num_alloc_get
    if _newclass:num_alloc = _swig_property(__m2crypto.STACK_num_alloc_get, __m2crypto.STACK_num_alloc_set)
    __swig_setmethods__["comp"] = __m2crypto.STACK_comp_set
    __swig_getmethods__["comp"] = __m2crypto.STACK_comp_get
    if _newclass:comp = _swig_property(__m2crypto.STACK_comp_get, __m2crypto.STACK_comp_set)
    def __init__(self): 
        this = __m2crypto.new_STACK()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = __m2crypto.delete_STACK
    __del__ = lambda self : None;
STACK_swigregister = __m2crypto.STACK_swigregister
STACK_swigregister(STACK)


def sk_num(*args):
  return __m2crypto.sk_num(*args)
sk_num = __m2crypto.sk_num

def sk_value(*args):
  return __m2crypto.sk_value(*args)
sk_value = __m2crypto.sk_value

def sk_set(*args):
  return __m2crypto.sk_set(*args)
sk_set = __m2crypto.sk_set

def sk_new(*args):
  return __m2crypto.sk_new(*args)
sk_new = __m2crypto.sk_new

def sk_new_null():
  return __m2crypto.sk_new_null()
sk_new_null = __m2crypto.sk_new_null

def sk_free(*args):
  return __m2crypto.sk_free(*args)
sk_free = __m2crypto.sk_free

def sk_pop_free(*args):
  return __m2crypto.sk_pop_free(*args)
sk_pop_free = __m2crypto.sk_pop_free

def sk_insert(*args):
  return __m2crypto.sk_insert(*args)
sk_insert = __m2crypto.sk_insert

def sk_delete(*args):
  return __m2crypto.sk_delete(*args)
sk_delete = __m2crypto.sk_delete

def sk_delete_ptr(*args):
  return __m2crypto.sk_delete_ptr(*args)
sk_delete_ptr = __m2crypto.sk_delete_ptr

def sk_find(*args):
  return __m2crypto.sk_find(*args)
sk_find = __m2crypto.sk_find

def sk_find_ex(*args):
  return __m2crypto.sk_find_ex(*args)
sk_find_ex = __m2crypto.sk_find_ex

def sk_push(*args):
  return __m2crypto.sk_push(*args)
sk_push = __m2crypto.sk_push

def sk_unshift(*args):
  return __m2crypto.sk_unshift(*args)
sk_unshift = __m2crypto.sk_unshift

def sk_shift(*args):
  return __m2crypto.sk_shift(*args)
sk_shift = __m2crypto.sk_shift

def sk_pop(*args):
  return __m2crypto.sk_pop(*args)
sk_pop = __m2crypto.sk_pop

def sk_zero(*args):
  return __m2crypto.sk_zero(*args)
sk_zero = __m2crypto.sk_zero

def sk_set_cmp_func(*args):
  return __m2crypto.sk_set_cmp_func(*args)
sk_set_cmp_func = __m2crypto.sk_set_cmp_func

def sk_dup(*args):
  return __m2crypto.sk_dup(*args)
sk_dup = __m2crypto.sk_dup

def sk_sort(*args):
  return __m2crypto.sk_sort(*args)
sk_sort = __m2crypto.sk_sort

def sk_is_sorted(*args):
  return __m2crypto.sk_is_sorted(*args)
sk_is_sorted = __m2crypto.sk_is_sorted

def threading_init():
  return __m2crypto.threading_init()
threading_init = __m2crypto.threading_init

def threading_cleanup():
  return __m2crypto.threading_cleanup()
threading_cleanup = __m2crypto.threading_cleanup

def lib_init():
  return __m2crypto.lib_init()
lib_init = __m2crypto.lib_init

def bn_to_mpi(*args):
  return __m2crypto.bn_to_mpi(*args)
bn_to_mpi = __m2crypto.bn_to_mpi

def mpi_to_bn(*args):
  return __m2crypto.mpi_to_bn(*args)
mpi_to_bn = __m2crypto.mpi_to_bn

def bn_to_bin(*args):
  return __m2crypto.bn_to_bin(*args)
bn_to_bin = __m2crypto.bn_to_bin

def bin_to_bn(*args):
  return __m2crypto.bin_to_bn(*args)
bin_to_bn = __m2crypto.bin_to_bn

def bn_to_hex(*args):
  return __m2crypto.bn_to_hex(*args)
bn_to_hex = __m2crypto.bn_to_hex

def hex_to_bn(*args):
  return __m2crypto.hex_to_bn(*args)
hex_to_bn = __m2crypto.hex_to_bn

def dec_to_bn(*args):
  return __m2crypto.dec_to_bn(*args)
dec_to_bn = __m2crypto.dec_to_bn

def err_print_errors_fp(*args):
  return __m2crypto.err_print_errors_fp(*args)
err_print_errors_fp = __m2crypto.err_print_errors_fp

def err_print_errors(*args):
  return __m2crypto.err_print_errors(*args)
err_print_errors = __m2crypto.err_print_errors

def err_get_error():
  return __m2crypto.err_get_error()
err_get_error = __m2crypto.err_get_error

def err_peek_error():
  return __m2crypto.err_peek_error()
err_peek_error = __m2crypto.err_peek_error

def err_lib_error_string(*args):
  return __m2crypto.err_lib_error_string(*args)
err_lib_error_string = __m2crypto.err_lib_error_string

def err_func_error_string(*args):
  return __m2crypto.err_func_error_string(*args)
err_func_error_string = __m2crypto.err_func_error_string

def err_reason_error_string(*args):
  return __m2crypto.err_reason_error_string(*args)
err_reason_error_string = __m2crypto.err_reason_error_string

def bio_s_bio():
  return __m2crypto.bio_s_bio()
bio_s_bio = __m2crypto.bio_s_bio

def bio_s_mem():
  return __m2crypto.bio_s_mem()
bio_s_mem = __m2crypto.bio_s_mem

def bio_s_socket():
  return __m2crypto.bio_s_socket()
bio_s_socket = __m2crypto.bio_s_socket

def bio_f_ssl():
  return __m2crypto.bio_f_ssl()
bio_f_ssl = __m2crypto.bio_f_ssl

def bio_f_buffer():
  return __m2crypto.bio_f_buffer()
bio_f_buffer = __m2crypto.bio_f_buffer

def bio_f_cipher():
  return __m2crypto.bio_f_cipher()
bio_f_cipher = __m2crypto.bio_f_cipher

def bio_new(*args):
  return __m2crypto.bio_new(*args)
bio_new = __m2crypto.bio_new

def bio_new_socket(*args):
  return __m2crypto.bio_new_socket(*args)
bio_new_socket = __m2crypto.bio_new_socket

def bio_new_fd(*args):
  return __m2crypto.bio_new_fd(*args)
bio_new_fd = __m2crypto.bio_new_fd

def bio_new_fp(*args):
  return __m2crypto.bio_new_fp(*args)
bio_new_fp = __m2crypto.bio_new_fp

def bio_new_file(*args):
  return __m2crypto.bio_new_file(*args)
bio_new_file = __m2crypto.bio_new_file

def bio_free(*args):
  return __m2crypto.bio_free(*args)
bio_free = __m2crypto.bio_free

def bio_free_all(*args):
  return __m2crypto.bio_free_all(*args)
bio_free_all = __m2crypto.bio_free_all

def bio_dup_chain(*args):
  return __m2crypto.bio_dup_chain(*args)
bio_dup_chain = __m2crypto.bio_dup_chain

def bio_push(*args):
  return __m2crypto.bio_push(*args)
bio_push = __m2crypto.bio_push

def bio_pop(*args):
  return __m2crypto.bio_pop(*args)
bio_pop = __m2crypto.bio_pop
bio_noclose = __m2crypto.bio_noclose
bio_close = __m2crypto.bio_close
BIO_FLAGS_READ = __m2crypto.BIO_FLAGS_READ
BIO_FLAGS_WRITE = __m2crypto.BIO_FLAGS_WRITE
BIO_FLAGS_IO_SPECIAL = __m2crypto.BIO_FLAGS_IO_SPECIAL
BIO_FLAGS_RWS = __m2crypto.BIO_FLAGS_RWS
BIO_FLAGS_SHOULD_RETRY = __m2crypto.BIO_FLAGS_SHOULD_RETRY
BIO_FLAGS_MEM_RDONLY = __m2crypto.BIO_FLAGS_MEM_RDONLY

def bio_init(*args):
  return __m2crypto.bio_init(*args)
bio_init = __m2crypto.bio_init

def bio_read(*args):
  return __m2crypto.bio_read(*args)
bio_read = __m2crypto.bio_read

def bio_gets(*args):
  return __m2crypto.bio_gets(*args)
bio_gets = __m2crypto.bio_gets

def bio_write(*args):
  return __m2crypto.bio_write(*args)
bio_write = __m2crypto.bio_write

def bio_ctrl_pending(*args):
  return __m2crypto.bio_ctrl_pending(*args)
bio_ctrl_pending = __m2crypto.bio_ctrl_pending

def bio_ctrl_wpending(*args):
  return __m2crypto.bio_ctrl_wpending(*args)
bio_ctrl_wpending = __m2crypto.bio_ctrl_wpending

def bio_ctrl_get_write_guarantee(*args):
  return __m2crypto.bio_ctrl_get_write_guarantee(*args)
bio_ctrl_get_write_guarantee = __m2crypto.bio_ctrl_get_write_guarantee

def bio_reset(*args):
  return __m2crypto.bio_reset(*args)
bio_reset = __m2crypto.bio_reset

def bio_flush(*args):
  return __m2crypto.bio_flush(*args)
bio_flush = __m2crypto.bio_flush

def bio_seek(*args):
  return __m2crypto.bio_seek(*args)
bio_seek = __m2crypto.bio_seek

def bio_set_flags(*args):
  return __m2crypto.bio_set_flags(*args)
bio_set_flags = __m2crypto.bio_set_flags

def bio_get_flags(*args):
  return __m2crypto.bio_get_flags(*args)
bio_get_flags = __m2crypto.bio_get_flags

def bio_set_cipher(*args):
  return __m2crypto.bio_set_cipher(*args)
bio_set_cipher = __m2crypto.bio_set_cipher

def bio_set_mem_eof_return(*args):
  return __m2crypto.bio_set_mem_eof_return(*args)
bio_set_mem_eof_return = __m2crypto.bio_set_mem_eof_return

def bio_get_fd(*args):
  return __m2crypto.bio_get_fd(*args)
bio_get_fd = __m2crypto.bio_get_fd

def bio_do_handshake(*args):
  return __m2crypto.bio_do_handshake(*args)
bio_do_handshake = __m2crypto.bio_do_handshake

def bio_make_bio_pair(*args):
  return __m2crypto.bio_make_bio_pair(*args)
bio_make_bio_pair = __m2crypto.bio_make_bio_pair

def bio_set_write_buf_size(*args):
  return __m2crypto.bio_set_write_buf_size(*args)
bio_set_write_buf_size = __m2crypto.bio_set_write_buf_size

def bio_should_retry(*args):
  return __m2crypto.bio_should_retry(*args)
bio_should_retry = __m2crypto.bio_should_retry

def bio_should_read(*args):
  return __m2crypto.bio_should_read(*args)
bio_should_read = __m2crypto.bio_should_read

def bio_should_write(*args):
  return __m2crypto.bio_should_write(*args)
bio_should_write = __m2crypto.bio_should_write

def bn_rand(*args):
  return __m2crypto.bn_rand(*args)
bn_rand = __m2crypto.bn_rand

def bn_rand_range(*args):
  return __m2crypto.bn_rand_range(*args)
bn_rand_range = __m2crypto.bn_rand_range

def rand_load_file(*args):
  return __m2crypto.rand_load_file(*args)
rand_load_file = __m2crypto.rand_load_file

def rand_save_file(*args):
  return __m2crypto.rand_save_file(*args)
rand_save_file = __m2crypto.rand_save_file

def rand_poll():
  return __m2crypto.rand_poll()
rand_poll = __m2crypto.rand_poll

def rand_status():
  return __m2crypto.rand_status()
rand_status = __m2crypto.rand_status

def rand_cleanup():
  return __m2crypto.rand_cleanup()
rand_cleanup = __m2crypto.rand_cleanup

def rand_init(*args):
  return __m2crypto.rand_init(*args)
rand_init = __m2crypto.rand_init

def rand_seed(*args):
  return __m2crypto.rand_seed(*args)
rand_seed = __m2crypto.rand_seed

def rand_add(*args):
  return __m2crypto.rand_add(*args)
rand_add = __m2crypto.rand_add

def rand_bytes(*args):
  return __m2crypto.rand_bytes(*args)
rand_bytes = __m2crypto.rand_bytes

def rand_pseudo_bytes(*args):
  return __m2crypto.rand_pseudo_bytes(*args)
rand_pseudo_bytes = __m2crypto.rand_pseudo_bytes

def rand_screen():
  return __m2crypto.rand_screen()
rand_screen = __m2crypto.rand_screen

def rand_win32_event(*args):
  return __m2crypto.rand_win32_event(*args)
rand_win32_event = __m2crypto.rand_win32_event

def md5():
  return __m2crypto.md5()
md5 = __m2crypto.md5

def sha1():
  return __m2crypto.sha1()
sha1 = __m2crypto.sha1

def ripemd160():
  return __m2crypto.ripemd160()
ripemd160 = __m2crypto.ripemd160

def sha224():
  return __m2crypto.sha224()
sha224 = __m2crypto.sha224

def sha256():
  return __m2crypto.sha256()
sha256 = __m2crypto.sha256

def sha384():
  return __m2crypto.sha384()
sha384 = __m2crypto.sha384

def sha512():
  return __m2crypto.sha512()
sha512 = __m2crypto.sha512

def digest_init(*args):
  return __m2crypto.digest_init(*args)
digest_init = __m2crypto.digest_init

def des_ecb():
  return __m2crypto.des_ecb()
des_ecb = __m2crypto.des_ecb

def des_ede_ecb():
  return __m2crypto.des_ede_ecb()
des_ede_ecb = __m2crypto.des_ede_ecb

def des_ede3_ecb():
  return __m2crypto.des_ede3_ecb()
des_ede3_ecb = __m2crypto.des_ede3_ecb

def des_cbc():
  return __m2crypto.des_cbc()
des_cbc = __m2crypto.des_cbc

def des_ede_cbc():
  return __m2crypto.des_ede_cbc()
des_ede_cbc = __m2crypto.des_ede_cbc

def des_ede3_cbc():
  return __m2crypto.des_ede3_cbc()
des_ede3_cbc = __m2crypto.des_ede3_cbc

def des_cfb():
  return __m2crypto.des_cfb()
des_cfb = __m2crypto.des_cfb

def des_ede_cfb():
  return __m2crypto.des_ede_cfb()
des_ede_cfb = __m2crypto.des_ede_cfb

def des_ede3_cfb():
  return __m2crypto.des_ede3_cfb()
des_ede3_cfb = __m2crypto.des_ede3_cfb

def des_ofb():
  return __m2crypto.des_ofb()
des_ofb = __m2crypto.des_ofb

def des_ede_ofb():
  return __m2crypto.des_ede_ofb()
des_ede_ofb = __m2crypto.des_ede_ofb

def des_ede3_ofb():
  return __m2crypto.des_ede3_ofb()
des_ede3_ofb = __m2crypto.des_ede3_ofb

def bf_ecb():
  return __m2crypto.bf_ecb()
bf_ecb = __m2crypto.bf_ecb

def bf_cbc():
  return __m2crypto.bf_cbc()
bf_cbc = __m2crypto.bf_cbc

def bf_cfb():
  return __m2crypto.bf_cfb()
bf_cfb = __m2crypto.bf_cfb

def bf_ofb():
  return __m2crypto.bf_ofb()
bf_ofb = __m2crypto.bf_ofb

def cast5_ecb():
  return __m2crypto.cast5_ecb()
cast5_ecb = __m2crypto.cast5_ecb

def cast5_cbc():
  return __m2crypto.cast5_cbc()
cast5_cbc = __m2crypto.cast5_cbc

def cast5_cfb():
  return __m2crypto.cast5_cfb()
cast5_cfb = __m2crypto.cast5_cfb

def cast5_ofb():
  return __m2crypto.cast5_ofb()
cast5_ofb = __m2crypto.cast5_ofb

def rc4():
  return __m2crypto.rc4()
rc4 = __m2crypto.rc4

def rc2_40_cbc():
  return __m2crypto.rc2_40_cbc()
rc2_40_cbc = __m2crypto.rc2_40_cbc

def aes_128_ecb():
  return __m2crypto.aes_128_ecb()
aes_128_ecb = __m2crypto.aes_128_ecb

def aes_128_cbc():
  return __m2crypto.aes_128_cbc()
aes_128_cbc = __m2crypto.aes_128_cbc

def aes_128_cfb():
  return __m2crypto.aes_128_cfb()
aes_128_cfb = __m2crypto.aes_128_cfb

def aes_128_ofb():
  return __m2crypto.aes_128_ofb()
aes_128_ofb = __m2crypto.aes_128_ofb

def aes_192_ecb():
  return __m2crypto.aes_192_ecb()
aes_192_ecb = __m2crypto.aes_192_ecb

def aes_192_cbc():
  return __m2crypto.aes_192_cbc()
aes_192_cbc = __m2crypto.aes_192_cbc

def aes_192_cfb():
  return __m2crypto.aes_192_cfb()
aes_192_cfb = __m2crypto.aes_192_cfb

def aes_192_ofb():
  return __m2crypto.aes_192_ofb()
aes_192_ofb = __m2crypto.aes_192_ofb

def aes_256_ecb():
  return __m2crypto.aes_256_ecb()
aes_256_ecb = __m2crypto.aes_256_ecb

def aes_256_cbc():
  return __m2crypto.aes_256_cbc()
aes_256_cbc = __m2crypto.aes_256_cbc

def aes_256_cfb():
  return __m2crypto.aes_256_cfb()
aes_256_cfb = __m2crypto.aes_256_cfb

def aes_256_ofb():
  return __m2crypto.aes_256_ofb()
aes_256_ofb = __m2crypto.aes_256_ofb

def cipher_set_padding(*args):
  return __m2crypto.cipher_set_padding(*args)
cipher_set_padding = __m2crypto.cipher_set_padding

def pkey_new():
  return __m2crypto.pkey_new()
pkey_new = __m2crypto.pkey_new

def pkey_free(*args):
  return __m2crypto.pkey_free(*args)
pkey_free = __m2crypto.pkey_free

def pkey_assign(*args):
  return __m2crypto.pkey_assign(*args)
pkey_assign = __m2crypto.pkey_assign

def pkey_assign_ec(*args):
  return __m2crypto.pkey_assign_ec(*args)
pkey_assign_ec = __m2crypto.pkey_assign_ec

def pkey_set1_rsa(*args):
  return __m2crypto.pkey_set1_rsa(*args)
pkey_set1_rsa = __m2crypto.pkey_set1_rsa

def pkey_get1_rsa(*args):
  return __m2crypto.pkey_get1_rsa(*args)
pkey_get1_rsa = __m2crypto.pkey_get1_rsa

def sign_init(*args):
  return __m2crypto.sign_init(*args)
sign_init = __m2crypto.sign_init

def verify_init(*args):
  return __m2crypto.verify_init(*args)
verify_init = __m2crypto.verify_init

def pkey_size(*args):
  return __m2crypto.pkey_size(*args)
pkey_size = __m2crypto.pkey_size
PKCS5_SALT_LEN = __m2crypto.PKCS5_SALT_LEN

def evp_init(*args):
  return __m2crypto.evp_init(*args)
evp_init = __m2crypto.evp_init

def pkcs5_pbkdf2_hmac_sha1(*args):
  return __m2crypto.pkcs5_pbkdf2_hmac_sha1(*args)
pkcs5_pbkdf2_hmac_sha1 = __m2crypto.pkcs5_pbkdf2_hmac_sha1

def md_ctx_new():
  return __m2crypto.md_ctx_new()
md_ctx_new = __m2crypto.md_ctx_new

def md_ctx_free(*args):
  return __m2crypto.md_ctx_free(*args)
md_ctx_free = __m2crypto.md_ctx_free

def digest_update(*args):
  return __m2crypto.digest_update(*args)
digest_update = __m2crypto.digest_update

def digest_final(*args):
  return __m2crypto.digest_final(*args)
digest_final = __m2crypto.digest_final

def hmac_ctx_new():
  return __m2crypto.hmac_ctx_new()
hmac_ctx_new = __m2crypto.hmac_ctx_new

def hmac_ctx_free(*args):
  return __m2crypto.hmac_ctx_free(*args)
hmac_ctx_free = __m2crypto.hmac_ctx_free

def hmac_init(*args):
  return __m2crypto.hmac_init(*args)
hmac_init = __m2crypto.hmac_init

def hmac_update(*args):
  return __m2crypto.hmac_update(*args)
hmac_update = __m2crypto.hmac_update

def hmac_final(*args):
  return __m2crypto.hmac_final(*args)
hmac_final = __m2crypto.hmac_final

def hmac(*args):
  return __m2crypto.hmac(*args)
hmac = __m2crypto.hmac

def cipher_ctx_new():
  return __m2crypto.cipher_ctx_new()
cipher_ctx_new = __m2crypto.cipher_ctx_new

def cipher_ctx_free(*args):
  return __m2crypto.cipher_ctx_free(*args)
cipher_ctx_free = __m2crypto.cipher_ctx_free

def bytes_to_key(*args):
  return __m2crypto.bytes_to_key(*args)
bytes_to_key = __m2crypto.bytes_to_key

def cipher_init(*args):
  return __m2crypto.cipher_init(*args)
cipher_init = __m2crypto.cipher_init

def cipher_update(*args):
  return __m2crypto.cipher_update(*args)
cipher_update = __m2crypto.cipher_update

def cipher_final(*args):
  return __m2crypto.cipher_final(*args)
cipher_final = __m2crypto.cipher_final

def sign_update(*args):
  return __m2crypto.sign_update(*args)
sign_update = __m2crypto.sign_update

def sign_final(*args):
  return __m2crypto.sign_final(*args)
sign_final = __m2crypto.sign_final

def verify_update(*args):
  return __m2crypto.verify_update(*args)
verify_update = __m2crypto.verify_update

def verify_final(*args):
  return __m2crypto.verify_final(*args)
verify_final = __m2crypto.verify_final

def pkey_write_pem_no_cipher(*args):
  return __m2crypto.pkey_write_pem_no_cipher(*args)
pkey_write_pem_no_cipher = __m2crypto.pkey_write_pem_no_cipher

def pkey_write_pem(*args):
  return __m2crypto.pkey_write_pem(*args)
pkey_write_pem = __m2crypto.pkey_write_pem

def pkey_read_pem(*args):
  return __m2crypto.pkey_read_pem(*args)
pkey_read_pem = __m2crypto.pkey_read_pem

def pkey_assign_rsa(*args):
  return __m2crypto.pkey_assign_rsa(*args)
pkey_assign_rsa = __m2crypto.pkey_assign_rsa

def pkey_as_der(*args):
  return __m2crypto.pkey_as_der(*args)
pkey_as_der = __m2crypto.pkey_as_der

def pkey_get_modulus(*args):
  return __m2crypto.pkey_get_modulus(*args)
pkey_get_modulus = __m2crypto.pkey_get_modulus
AES_BLOCK_SIZE = __m2crypto.AES_BLOCK_SIZE

def aes_new():
  return __m2crypto.aes_new()
aes_new = __m2crypto.aes_new

def AES_free(*args):
  return __m2crypto.AES_free(*args)
AES_free = __m2crypto.AES_free

def AES_set_key(*args):
  return __m2crypto.AES_set_key(*args)
AES_set_key = __m2crypto.AES_set_key

def AES_crypt(*args):
  return __m2crypto.AES_crypt(*args)
AES_crypt = __m2crypto.AES_crypt

def AES_type_check(*args):
  return __m2crypto.AES_type_check(*args)
AES_type_check = __m2crypto.AES_type_check

def rc4_new():
  return __m2crypto.rc4_new()
rc4_new = __m2crypto.rc4_new

def rc4_free(*args):
  return __m2crypto.rc4_free(*args)
rc4_free = __m2crypto.rc4_free

def rc4_set_key(*args):
  return __m2crypto.rc4_set_key(*args)
rc4_set_key = __m2crypto.rc4_set_key

def rc4_update(*args):
  return __m2crypto.rc4_update(*args)
rc4_update = __m2crypto.rc4_update

def rc4_type_check(*args):
  return __m2crypto.rc4_type_check(*args)
rc4_type_check = __m2crypto.rc4_type_check

def dh_new():
  return __m2crypto.dh_new()
dh_new = __m2crypto.dh_new

def dh_free(*args):
  return __m2crypto.dh_free(*args)
dh_free = __m2crypto.dh_free

def dh_size(*args):
  return __m2crypto.dh_size(*args)
dh_size = __m2crypto.dh_size

def dh_generate_key(*args):
  return __m2crypto.dh_generate_key(*args)
dh_generate_key = __m2crypto.dh_generate_key

def dhparams_print(*args):
  return __m2crypto.dhparams_print(*args)
dhparams_print = __m2crypto.dhparams_print
dh_check_ok = __m2crypto.dh_check_ok
dh_check_p_not_prime = __m2crypto.dh_check_p_not_prime
dh_check_p_not_strong = __m2crypto.dh_check_p_not_strong
dh_check_g_failed = __m2crypto.dh_check_g_failed
dh_check_bad_g = __m2crypto.dh_check_bad_g
DH_GENERATOR_2 = __m2crypto.DH_GENERATOR_2
DH_GENERATOR_5 = __m2crypto.DH_GENERATOR_5

def dh_init(*args):
  return __m2crypto.dh_init(*args)
dh_init = __m2crypto.dh_init

def dh_type_check(*args):
  return __m2crypto.dh_type_check(*args)
dh_type_check = __m2crypto.dh_type_check

def dh_read_parameters(*args):
  return __m2crypto.dh_read_parameters(*args)
dh_read_parameters = __m2crypto.dh_read_parameters

def gendh_callback(*args):
  return __m2crypto.gendh_callback(*args)
gendh_callback = __m2crypto.gendh_callback

def dh_generate_parameters(*args):
  return __m2crypto.dh_generate_parameters(*args)
dh_generate_parameters = __m2crypto.dh_generate_parameters

def dh_check(*args):
  return __m2crypto.dh_check(*args)
dh_check = __m2crypto.dh_check

def dh_compute_key(*args):
  return __m2crypto.dh_compute_key(*args)
dh_compute_key = __m2crypto.dh_compute_key

def dh_get_p(*args):
  return __m2crypto.dh_get_p(*args)
dh_get_p = __m2crypto.dh_get_p

def dh_get_g(*args):
  return __m2crypto.dh_get_g(*args)
dh_get_g = __m2crypto.dh_get_g

def dh_get_pub(*args):
  return __m2crypto.dh_get_pub(*args)
dh_get_pub = __m2crypto.dh_get_pub

def dh_get_priv(*args):
  return __m2crypto.dh_get_priv(*args)
dh_get_priv = __m2crypto.dh_get_priv

def dh_set_p(*args):
  return __m2crypto.dh_set_p(*args)
dh_set_p = __m2crypto.dh_set_p

def dh_set_g(*args):
  return __m2crypto.dh_set_g(*args)
dh_set_g = __m2crypto.dh_set_g

def rsa_new():
  return __m2crypto.rsa_new()
rsa_new = __m2crypto.rsa_new

def rsa_free(*args):
  return __m2crypto.rsa_free(*args)
rsa_free = __m2crypto.rsa_free

def rsa_size(*args):
  return __m2crypto.rsa_size(*args)
rsa_size = __m2crypto.rsa_size

def rsa_check_key(*args):
  return __m2crypto.rsa_check_key(*args)
rsa_check_key = __m2crypto.rsa_check_key
no_padding = __m2crypto.no_padding
pkcs1_padding = __m2crypto.pkcs1_padding
sslv23_padding = __m2crypto.sslv23_padding
pkcs1_oaep_padding = __m2crypto.pkcs1_oaep_padding
NID_sha1 = __m2crypto.NID_sha1
NID_sha224 = __m2crypto.NID_sha224
NID_sha256 = __m2crypto.NID_sha256
NID_sha384 = __m2crypto.NID_sha384
NID_sha512 = __m2crypto.NID_sha512
NID_md5 = __m2crypto.NID_md5
NID_ripemd160 = __m2crypto.NID_ripemd160

def rsa_init(*args):
  return __m2crypto.rsa_init(*args)
rsa_init = __m2crypto.rsa_init

def rsa_read_key(*args):
  return __m2crypto.rsa_read_key(*args)
rsa_read_key = __m2crypto.rsa_read_key

def rsa_write_key(*args):
  return __m2crypto.rsa_write_key(*args)
rsa_write_key = __m2crypto.rsa_write_key

def rsa_write_key_no_cipher(*args):
  return __m2crypto.rsa_write_key_no_cipher(*args)
rsa_write_key_no_cipher = __m2crypto.rsa_write_key_no_cipher

def rsa_read_pub_key(*args):
  return __m2crypto.rsa_read_pub_key(*args)
rsa_read_pub_key = __m2crypto.rsa_read_pub_key

def rsa_write_pub_key(*args):
  return __m2crypto.rsa_write_pub_key(*args)
rsa_write_pub_key = __m2crypto.rsa_write_pub_key

def rsa_get_e(*args):
  return __m2crypto.rsa_get_e(*args)
rsa_get_e = __m2crypto.rsa_get_e

def rsa_get_n(*args):
  return __m2crypto.rsa_get_n(*args)
rsa_get_n = __m2crypto.rsa_get_n

def rsa_set_e(*args):
  return __m2crypto.rsa_set_e(*args)
rsa_set_e = __m2crypto.rsa_set_e

def rsa_set_n(*args):
  return __m2crypto.rsa_set_n(*args)
rsa_set_n = __m2crypto.rsa_set_n

def rsa_set_e_bin(*args):
  return __m2crypto.rsa_set_e_bin(*args)
rsa_set_e_bin = __m2crypto.rsa_set_e_bin

def rsa_set_n_bin(*args):
  return __m2crypto.rsa_set_n_bin(*args)
rsa_set_n_bin = __m2crypto.rsa_set_n_bin

def rsa_private_encrypt(*args):
  return __m2crypto.rsa_private_encrypt(*args)
rsa_private_encrypt = __m2crypto.rsa_private_encrypt

def rsa_public_decrypt(*args):
  return __m2crypto.rsa_public_decrypt(*args)
rsa_public_decrypt = __m2crypto.rsa_public_decrypt

def rsa_public_encrypt(*args):
  return __m2crypto.rsa_public_encrypt(*args)
rsa_public_encrypt = __m2crypto.rsa_public_encrypt

def rsa_private_decrypt(*args):
  return __m2crypto.rsa_private_decrypt(*args)
rsa_private_decrypt = __m2crypto.rsa_private_decrypt

def rsa_padding_add_pkcs1_pss(*args):
  return __m2crypto.rsa_padding_add_pkcs1_pss(*args)
rsa_padding_add_pkcs1_pss = __m2crypto.rsa_padding_add_pkcs1_pss

def rsa_verify_pkcs1_pss(*args):
  return __m2crypto.rsa_verify_pkcs1_pss(*args)
rsa_verify_pkcs1_pss = __m2crypto.rsa_verify_pkcs1_pss

def rsa_sign(*args):
  return __m2crypto.rsa_sign(*args)
rsa_sign = __m2crypto.rsa_sign

def rsa_verify(*args):
  return __m2crypto.rsa_verify(*args)
rsa_verify = __m2crypto.rsa_verify

def genrsa_callback(*args):
  return __m2crypto.genrsa_callback(*args)
genrsa_callback = __m2crypto.genrsa_callback

def rsa_generate_key(*args):
  return __m2crypto.rsa_generate_key(*args)
rsa_generate_key = __m2crypto.rsa_generate_key

def rsa_type_check(*args):
  return __m2crypto.rsa_type_check(*args)
rsa_type_check = __m2crypto.rsa_type_check

def rsa_check_pub_key(*args):
  return __m2crypto.rsa_check_pub_key(*args)
rsa_check_pub_key = __m2crypto.rsa_check_pub_key

def rsa_write_key_der(*args):
  return __m2crypto.rsa_write_key_der(*args)
rsa_write_key_der = __m2crypto.rsa_write_key_der

def dsa_new():
  return __m2crypto.dsa_new()
dsa_new = __m2crypto.dsa_new

def dsa_free(*args):
  return __m2crypto.dsa_free(*args)
dsa_free = __m2crypto.dsa_free

def dsa_size(*args):
  return __m2crypto.dsa_size(*args)
dsa_size = __m2crypto.dsa_size

def dsa_gen_key(*args):
  return __m2crypto.dsa_gen_key(*args)
dsa_gen_key = __m2crypto.dsa_gen_key

def dsa_init(*args):
  return __m2crypto.dsa_init(*args)
dsa_init = __m2crypto.dsa_init

def genparam_callback(*args):
  return __m2crypto.genparam_callback(*args)
genparam_callback = __m2crypto.genparam_callback

def dsa_generate_parameters(*args):
  return __m2crypto.dsa_generate_parameters(*args)
dsa_generate_parameters = __m2crypto.dsa_generate_parameters

def dsa_get_p(*args):
  return __m2crypto.dsa_get_p(*args)
dsa_get_p = __m2crypto.dsa_get_p

def dsa_get_q(*args):
  return __m2crypto.dsa_get_q(*args)
dsa_get_q = __m2crypto.dsa_get_q

def dsa_get_g(*args):
  return __m2crypto.dsa_get_g(*args)
dsa_get_g = __m2crypto.dsa_get_g

def dsa_get_pub(*args):
  return __m2crypto.dsa_get_pub(*args)
dsa_get_pub = __m2crypto.dsa_get_pub

def dsa_get_priv(*args):
  return __m2crypto.dsa_get_priv(*args)
dsa_get_priv = __m2crypto.dsa_get_priv

def dsa_set_p(*args):
  return __m2crypto.dsa_set_p(*args)
dsa_set_p = __m2crypto.dsa_set_p

def dsa_set_q(*args):
  return __m2crypto.dsa_set_q(*args)
dsa_set_q = __m2crypto.dsa_set_q

def dsa_set_g(*args):
  return __m2crypto.dsa_set_g(*args)
dsa_set_g = __m2crypto.dsa_set_g

def dsa_read_params(*args):
  return __m2crypto.dsa_read_params(*args)
dsa_read_params = __m2crypto.dsa_read_params

def dsa_write_params_bio(*args):
  return __m2crypto.dsa_write_params_bio(*args)
dsa_write_params_bio = __m2crypto.dsa_write_params_bio

def dsa_write_key_bio(*args):
  return __m2crypto.dsa_write_key_bio(*args)
dsa_write_key_bio = __m2crypto.dsa_write_key_bio

def dsa_write_key_bio_no_cipher(*args):
  return __m2crypto.dsa_write_key_bio_no_cipher(*args)
dsa_write_key_bio_no_cipher = __m2crypto.dsa_write_key_bio_no_cipher

def dsa_write_pub_key_bio(*args):
  return __m2crypto.dsa_write_pub_key_bio(*args)
dsa_write_pub_key_bio = __m2crypto.dsa_write_pub_key_bio

def dsa_read_key(*args):
  return __m2crypto.dsa_read_key(*args)
dsa_read_key = __m2crypto.dsa_read_key

def dsa_read_pub_key(*args):
  return __m2crypto.dsa_read_pub_key(*args)
dsa_read_pub_key = __m2crypto.dsa_read_pub_key

def dsa_sign(*args):
  return __m2crypto.dsa_sign(*args)
dsa_sign = __m2crypto.dsa_sign

def dsa_verify(*args):
  return __m2crypto.dsa_verify(*args)
dsa_verify = __m2crypto.dsa_verify

def dsa_sign_asn1(*args):
  return __m2crypto.dsa_sign_asn1(*args)
dsa_sign_asn1 = __m2crypto.dsa_sign_asn1

def dsa_verify_asn1(*args):
  return __m2crypto.dsa_verify_asn1(*args)
dsa_verify_asn1 = __m2crypto.dsa_verify_asn1

def dsa_check_key(*args):
  return __m2crypto.dsa_check_key(*args)
dsa_check_key = __m2crypto.dsa_check_key

def dsa_check_pub_key(*args):
  return __m2crypto.dsa_check_pub_key(*args)
dsa_check_pub_key = __m2crypto.dsa_check_pub_key

def dsa_keylen(*args):
  return __m2crypto.dsa_keylen(*args)
dsa_keylen = __m2crypto.dsa_keylen

def dsa_type_check(*args):
  return __m2crypto.dsa_type_check(*args)
dsa_type_check = __m2crypto.dsa_type_check

def ssl_get_ciphers(*args):
  return __m2crypto.ssl_get_ciphers(*args)
ssl_get_ciphers = __m2crypto.ssl_get_ciphers

def ssl_get_version(*args):
  return __m2crypto.ssl_get_version(*args)
ssl_get_version = __m2crypto.ssl_get_version

def ssl_get_error(*args):
  return __m2crypto.ssl_get_error(*args)
ssl_get_error = __m2crypto.ssl_get_error

def ssl_get_state(*args):
  return __m2crypto.ssl_get_state(*args)
ssl_get_state = __m2crypto.ssl_get_state

def ssl_get_state_v(*args):
  return __m2crypto.ssl_get_state_v(*args)
ssl_get_state_v = __m2crypto.ssl_get_state_v

def ssl_get_alert_type(*args):
  return __m2crypto.ssl_get_alert_type(*args)
ssl_get_alert_type = __m2crypto.ssl_get_alert_type

def ssl_get_alert_type_v(*args):
  return __m2crypto.ssl_get_alert_type_v(*args)
ssl_get_alert_type_v = __m2crypto.ssl_get_alert_type_v

def ssl_get_alert_desc(*args):
  return __m2crypto.ssl_get_alert_desc(*args)
ssl_get_alert_desc = __m2crypto.ssl_get_alert_desc

def ssl_get_alert_desc_v(*args):
  return __m2crypto.ssl_get_alert_desc_v(*args)
ssl_get_alert_desc_v = __m2crypto.ssl_get_alert_desc_v

def sslv2_method():
  return __m2crypto.sslv2_method()
sslv2_method = __m2crypto.sslv2_method

def sslv3_method():
  return __m2crypto.sslv3_method()
sslv3_method = __m2crypto.sslv3_method

def sslv23_method():
  return __m2crypto.sslv23_method()
sslv23_method = __m2crypto.sslv23_method

def tlsv1_method():
  return __m2crypto.tlsv1_method()
tlsv1_method = __m2crypto.tlsv1_method

def ssl_ctx_new(*args):
  return __m2crypto.ssl_ctx_new(*args)
ssl_ctx_new = __m2crypto.ssl_ctx_new

def ssl_ctx_free(*args):
  return __m2crypto.ssl_ctx_free(*args)
ssl_ctx_free = __m2crypto.ssl_ctx_free

def ssl_ctx_set_verify_depth(*args):
  return __m2crypto.ssl_ctx_set_verify_depth(*args)
ssl_ctx_set_verify_depth = __m2crypto.ssl_ctx_set_verify_depth

def ssl_ctx_get_verify_depth(*args):
  return __m2crypto.ssl_ctx_get_verify_depth(*args)
ssl_ctx_get_verify_depth = __m2crypto.ssl_ctx_get_verify_depth

def ssl_ctx_get_verify_mode(*args):
  return __m2crypto.ssl_ctx_get_verify_mode(*args)
ssl_ctx_get_verify_mode = __m2crypto.ssl_ctx_get_verify_mode

def ssl_ctx_set_cipher_list(*args):
  return __m2crypto.ssl_ctx_set_cipher_list(*args)
ssl_ctx_set_cipher_list = __m2crypto.ssl_ctx_set_cipher_list

def ssl_ctx_add_session(*args):
  return __m2crypto.ssl_ctx_add_session(*args)
ssl_ctx_add_session = __m2crypto.ssl_ctx_add_session

def ssl_ctx_remove_session(*args):
  return __m2crypto.ssl_ctx_remove_session(*args)
ssl_ctx_remove_session = __m2crypto.ssl_ctx_remove_session

def ssl_ctx_set_session_timeout(*args):
  return __m2crypto.ssl_ctx_set_session_timeout(*args)
ssl_ctx_set_session_timeout = __m2crypto.ssl_ctx_set_session_timeout

def ssl_ctx_get_session_timeout(*args):
  return __m2crypto.ssl_ctx_get_session_timeout(*args)
ssl_ctx_get_session_timeout = __m2crypto.ssl_ctx_get_session_timeout

def ssl_ctx_get_cert_store(*args):
  return __m2crypto.ssl_ctx_get_cert_store(*args)
ssl_ctx_get_cert_store = __m2crypto.ssl_ctx_get_cert_store

def bio_new_ssl(*args):
  return __m2crypto.bio_new_ssl(*args)
bio_new_ssl = __m2crypto.bio_new_ssl

def ssl_new(*args):
  return __m2crypto.ssl_new(*args)
ssl_new = __m2crypto.ssl_new

def ssl_free(*args):
  return __m2crypto.ssl_free(*args)
ssl_free = __m2crypto.ssl_free

def ssl_dup(*args):
  return __m2crypto.ssl_dup(*args)
ssl_dup = __m2crypto.ssl_dup

def ssl_set_bio(*args):
  return __m2crypto.ssl_set_bio(*args)
ssl_set_bio = __m2crypto.ssl_set_bio

def ssl_set_accept_state(*args):
  return __m2crypto.ssl_set_accept_state(*args)
ssl_set_accept_state = __m2crypto.ssl_set_accept_state

def ssl_set_connect_state(*args):
  return __m2crypto.ssl_set_connect_state(*args)
ssl_set_connect_state = __m2crypto.ssl_set_connect_state

def ssl_get_shutdown(*args):
  return __m2crypto.ssl_get_shutdown(*args)
ssl_get_shutdown = __m2crypto.ssl_get_shutdown

def ssl_set_shutdown(*args):
  return __m2crypto.ssl_set_shutdown(*args)
ssl_set_shutdown = __m2crypto.ssl_set_shutdown

def ssl_shutdown(*args):
  return __m2crypto.ssl_shutdown(*args)
ssl_shutdown = __m2crypto.ssl_shutdown

def ssl_clear(*args):
  return __m2crypto.ssl_clear(*args)
ssl_clear = __m2crypto.ssl_clear

def ssl_do_handshake(*args):
  return __m2crypto.ssl_do_handshake(*args)
ssl_do_handshake = __m2crypto.ssl_do_handshake

def ssl_renegotiate(*args):
  return __m2crypto.ssl_renegotiate(*args)
ssl_renegotiate = __m2crypto.ssl_renegotiate

def ssl_pending(*args):
  return __m2crypto.ssl_pending(*args)
ssl_pending = __m2crypto.ssl_pending

def ssl_get_peer_cert(*args):
  return __m2crypto.ssl_get_peer_cert(*args)
ssl_get_peer_cert = __m2crypto.ssl_get_peer_cert

def ssl_get_current_cipher(*args):
  return __m2crypto.ssl_get_current_cipher(*args)
ssl_get_current_cipher = __m2crypto.ssl_get_current_cipher

def ssl_get_verify_mode(*args):
  return __m2crypto.ssl_get_verify_mode(*args)
ssl_get_verify_mode = __m2crypto.ssl_get_verify_mode

def ssl_get_verify_depth(*args):
  return __m2crypto.ssl_get_verify_depth(*args)
ssl_get_verify_depth = __m2crypto.ssl_get_verify_depth

def ssl_get_verify_result(*args):
  return __m2crypto.ssl_get_verify_result(*args)
ssl_get_verify_result = __m2crypto.ssl_get_verify_result

def ssl_get_ssl_ctx(*args):
  return __m2crypto.ssl_get_ssl_ctx(*args)
ssl_get_ssl_ctx = __m2crypto.ssl_get_ssl_ctx

def ssl_get_default_session_timeout(*args):
  return __m2crypto.ssl_get_default_session_timeout(*args)
ssl_get_default_session_timeout = __m2crypto.ssl_get_default_session_timeout

def ssl_set_cipher_list(*args):
  return __m2crypto.ssl_set_cipher_list(*args)
ssl_set_cipher_list = __m2crypto.ssl_set_cipher_list

def ssl_get_cipher_list(*args):
  return __m2crypto.ssl_get_cipher_list(*args)
ssl_get_cipher_list = __m2crypto.ssl_get_cipher_list

def ssl_cipher_get_name(*args):
  return __m2crypto.ssl_cipher_get_name(*args)
ssl_cipher_get_name = __m2crypto.ssl_cipher_get_name

def ssl_cipher_get_version(*args):
  return __m2crypto.ssl_cipher_get_version(*args)
ssl_cipher_get_version = __m2crypto.ssl_cipher_get_version

def ssl_get_session(*args):
  return __m2crypto.ssl_get_session(*args)
ssl_get_session = __m2crypto.ssl_get_session

def ssl_get1_session(*args):
  return __m2crypto.ssl_get1_session(*args)
ssl_get1_session = __m2crypto.ssl_get1_session

def ssl_set_session(*args):
  return __m2crypto.ssl_set_session(*args)
ssl_set_session = __m2crypto.ssl_set_session

def ssl_session_free(*args):
  return __m2crypto.ssl_session_free(*args)
ssl_session_free = __m2crypto.ssl_session_free

def ssl_session_print(*args):
  return __m2crypto.ssl_session_print(*args)
ssl_session_print = __m2crypto.ssl_session_print

def ssl_session_set_timeout(*args):
  return __m2crypto.ssl_session_set_timeout(*args)
ssl_session_set_timeout = __m2crypto.ssl_session_set_timeout

def ssl_session_get_timeout(*args):
  return __m2crypto.ssl_session_get_timeout(*args)
ssl_session_get_timeout = __m2crypto.ssl_session_get_timeout
ssl_error_none = __m2crypto.ssl_error_none
ssl_error_ssl = __m2crypto.ssl_error_ssl
ssl_error_want_read = __m2crypto.ssl_error_want_read
ssl_error_want_write = __m2crypto.ssl_error_want_write
ssl_error_want_x509_lookup = __m2crypto.ssl_error_want_x509_lookup
ssl_error_syscall = __m2crypto.ssl_error_syscall
ssl_error_zero_return = __m2crypto.ssl_error_zero_return
ssl_error_want_connect = __m2crypto.ssl_error_want_connect
SSL_VERIFY_NONE = __m2crypto.SSL_VERIFY_NONE
SSL_VERIFY_PEER = __m2crypto.SSL_VERIFY_PEER
SSL_VERIFY_FAIL_IF_NO_PEER_CERT = __m2crypto.SSL_VERIFY_FAIL_IF_NO_PEER_CERT
SSL_VERIFY_CLIENT_ONCE = __m2crypto.SSL_VERIFY_CLIENT_ONCE
SSL_ST_CONNECT = __m2crypto.SSL_ST_CONNECT
SSL_ST_ACCEPT = __m2crypto.SSL_ST_ACCEPT
SSL_ST_MASK = __m2crypto.SSL_ST_MASK
SSL_ST_INIT = __m2crypto.SSL_ST_INIT
SSL_ST_BEFORE = __m2crypto.SSL_ST_BEFORE
SSL_ST_OK = __m2crypto.SSL_ST_OK
SSL_ST_RENEGOTIATE = __m2crypto.SSL_ST_RENEGOTIATE
SSL_CB_LOOP = __m2crypto.SSL_CB_LOOP
SSL_CB_EXIT = __m2crypto.SSL_CB_EXIT
SSL_CB_READ = __m2crypto.SSL_CB_READ
SSL_CB_WRITE = __m2crypto.SSL_CB_WRITE
SSL_CB_ALERT = __m2crypto.SSL_CB_ALERT
SSL_CB_READ_ALERT = __m2crypto.SSL_CB_READ_ALERT
SSL_CB_WRITE_ALERT = __m2crypto.SSL_CB_WRITE_ALERT
SSL_CB_ACCEPT_LOOP = __m2crypto.SSL_CB_ACCEPT_LOOP
SSL_CB_ACCEPT_EXIT = __m2crypto.SSL_CB_ACCEPT_EXIT
SSL_CB_CONNECT_LOOP = __m2crypto.SSL_CB_CONNECT_LOOP
SSL_CB_CONNECT_EXIT = __m2crypto.SSL_CB_CONNECT_EXIT
SSL_CB_HANDSHAKE_START = __m2crypto.SSL_CB_HANDSHAKE_START
SSL_CB_HANDSHAKE_DONE = __m2crypto.SSL_CB_HANDSHAKE_DONE
SSL_SENT_SHUTDOWN = __m2crypto.SSL_SENT_SHUTDOWN
SSL_RECEIVED_SHUTDOWN = __m2crypto.SSL_RECEIVED_SHUTDOWN
SSL_SESS_CACHE_OFF = __m2crypto.SSL_SESS_CACHE_OFF
SSL_SESS_CACHE_CLIENT = __m2crypto.SSL_SESS_CACHE_CLIENT
SSL_SESS_CACHE_SERVER = __m2crypto.SSL_SESS_CACHE_SERVER
SSL_SESS_CACHE_BOTH = __m2crypto.SSL_SESS_CACHE_BOTH
SSL_OP_ALL = __m2crypto.SSL_OP_ALL
SSL_OP_NO_SSLv2 = __m2crypto.SSL_OP_NO_SSLv2
SSL_OP_NO_SSLv3 = __m2crypto.SSL_OP_NO_SSLv3
SSL_OP_NO_TLSv1 = __m2crypto.SSL_OP_NO_TLSv1
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS = __m2crypto.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
SSL_MODE_ENABLE_PARTIAL_WRITE = __m2crypto.SSL_MODE_ENABLE_PARTIAL_WRITE
SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER = __m2crypto.SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
SSL_MODE_AUTO_RETRY = __m2crypto.SSL_MODE_AUTO_RETRY

def ssl_init(*args):
  return __m2crypto.ssl_init(*args)
ssl_init = __m2crypto.ssl_init

def ssl_ctx_passphrase_callback(*args):
  return __m2crypto.ssl_ctx_passphrase_callback(*args)
ssl_ctx_passphrase_callback = __m2crypto.ssl_ctx_passphrase_callback

def ssl_ctx_use_x509(*args):
  return __m2crypto.ssl_ctx_use_x509(*args)
ssl_ctx_use_x509 = __m2crypto.ssl_ctx_use_x509

def ssl_ctx_use_cert(*args):
  return __m2crypto.ssl_ctx_use_cert(*args)
ssl_ctx_use_cert = __m2crypto.ssl_ctx_use_cert

def ssl_ctx_use_cert_chain(*args):
  return __m2crypto.ssl_ctx_use_cert_chain(*args)
ssl_ctx_use_cert_chain = __m2crypto.ssl_ctx_use_cert_chain

def ssl_ctx_use_privkey(*args):
  return __m2crypto.ssl_ctx_use_privkey(*args)
ssl_ctx_use_privkey = __m2crypto.ssl_ctx_use_privkey

def ssl_ctx_use_rsa_privkey(*args):
  return __m2crypto.ssl_ctx_use_rsa_privkey(*args)
ssl_ctx_use_rsa_privkey = __m2crypto.ssl_ctx_use_rsa_privkey

def ssl_ctx_use_pkey_privkey(*args):
  return __m2crypto.ssl_ctx_use_pkey_privkey(*args)
ssl_ctx_use_pkey_privkey = __m2crypto.ssl_ctx_use_pkey_privkey

def ssl_ctx_check_privkey(*args):
  return __m2crypto.ssl_ctx_check_privkey(*args)
ssl_ctx_check_privkey = __m2crypto.ssl_ctx_check_privkey

def ssl_ctx_set_client_CA_list_from_file(*args):
  return __m2crypto.ssl_ctx_set_client_CA_list_from_file(*args)
ssl_ctx_set_client_CA_list_from_file = __m2crypto.ssl_ctx_set_client_CA_list_from_file

def ssl_ctx_set_verify_default(*args):
  return __m2crypto.ssl_ctx_set_verify_default(*args)
ssl_ctx_set_verify_default = __m2crypto.ssl_ctx_set_verify_default

def ssl_ctx_set_verify(*args):
  return __m2crypto.ssl_ctx_set_verify(*args)
ssl_ctx_set_verify = __m2crypto.ssl_ctx_set_verify

def ssl_ctx_set_session_id_context(*args):
  return __m2crypto.ssl_ctx_set_session_id_context(*args)
ssl_ctx_set_session_id_context = __m2crypto.ssl_ctx_set_session_id_context

def ssl_ctx_set_info_callback(*args):
  return __m2crypto.ssl_ctx_set_info_callback(*args)
ssl_ctx_set_info_callback = __m2crypto.ssl_ctx_set_info_callback

def ssl_ctx_set_tmp_dh(*args):
  return __m2crypto.ssl_ctx_set_tmp_dh(*args)
ssl_ctx_set_tmp_dh = __m2crypto.ssl_ctx_set_tmp_dh

def ssl_ctx_set_tmp_dh_callback(*args):
  return __m2crypto.ssl_ctx_set_tmp_dh_callback(*args)
ssl_ctx_set_tmp_dh_callback = __m2crypto.ssl_ctx_set_tmp_dh_callback

def ssl_ctx_set_tmp_rsa(*args):
  return __m2crypto.ssl_ctx_set_tmp_rsa(*args)
ssl_ctx_set_tmp_rsa = __m2crypto.ssl_ctx_set_tmp_rsa

def ssl_ctx_set_tmp_rsa_callback(*args):
  return __m2crypto.ssl_ctx_set_tmp_rsa_callback(*args)
ssl_ctx_set_tmp_rsa_callback = __m2crypto.ssl_ctx_set_tmp_rsa_callback

def ssl_ctx_load_verify_locations(*args):
  return __m2crypto.ssl_ctx_load_verify_locations(*args)
ssl_ctx_load_verify_locations = __m2crypto.ssl_ctx_load_verify_locations

def ssl_ctx_set_options(*args):
  return __m2crypto.ssl_ctx_set_options(*args)
ssl_ctx_set_options = __m2crypto.ssl_ctx_set_options

def bio_set_ssl(*args):
  return __m2crypto.bio_set_ssl(*args)
bio_set_ssl = __m2crypto.bio_set_ssl

def ssl_set_mode(*args):
  return __m2crypto.ssl_set_mode(*args)
ssl_set_mode = __m2crypto.ssl_set_mode

def ssl_get_mode(*args):
  return __m2crypto.ssl_get_mode(*args)
ssl_get_mode = __m2crypto.ssl_get_mode

def ssl_set_client_CA_list_from_file(*args):
  return __m2crypto.ssl_set_client_CA_list_from_file(*args)
ssl_set_client_CA_list_from_file = __m2crypto.ssl_set_client_CA_list_from_file

def ssl_set_client_CA_list_from_context(*args):
  return __m2crypto.ssl_set_client_CA_list_from_context(*args)
ssl_set_client_CA_list_from_context = __m2crypto.ssl_set_client_CA_list_from_context

def ssl_set_session_id_context(*args):
  return __m2crypto.ssl_set_session_id_context(*args)
ssl_set_session_id_context = __m2crypto.ssl_set_session_id_context

def ssl_set_fd(*args):
  return __m2crypto.ssl_set_fd(*args)
ssl_set_fd = __m2crypto.ssl_set_fd

def ssl_accept(*args):
  return __m2crypto.ssl_accept(*args)
ssl_accept = __m2crypto.ssl_accept

def ssl_connect(*args):
  return __m2crypto.ssl_connect(*args)
ssl_connect = __m2crypto.ssl_connect

def ssl_set_shutdown1(*args):
  return __m2crypto.ssl_set_shutdown1(*args)
ssl_set_shutdown1 = __m2crypto.ssl_set_shutdown1

def ssl_read(*args):
  return __m2crypto.ssl_read(*args)
ssl_read = __m2crypto.ssl_read

def ssl_read_nbio(*args):
  return __m2crypto.ssl_read_nbio(*args)
ssl_read_nbio = __m2crypto.ssl_read_nbio

def ssl_write(*args):
  return __m2crypto.ssl_write(*args)
ssl_write = __m2crypto.ssl_write

def ssl_write_nbio(*args):
  return __m2crypto.ssl_write_nbio(*args)
ssl_write_nbio = __m2crypto.ssl_write_nbio

def ssl_cipher_get_bits(*args):
  return __m2crypto.ssl_cipher_get_bits(*args)
ssl_cipher_get_bits = __m2crypto.ssl_cipher_get_bits

def sk_ssl_cipher_num(*args):
  return __m2crypto.sk_ssl_cipher_num(*args)
sk_ssl_cipher_num = __m2crypto.sk_ssl_cipher_num

def sk_ssl_cipher_value(*args):
  return __m2crypto.sk_ssl_cipher_value(*args)
sk_ssl_cipher_value = __m2crypto.sk_ssl_cipher_value

def ssl_get_peer_cert_chain(*args):
  return __m2crypto.ssl_get_peer_cert_chain(*args)
ssl_get_peer_cert_chain = __m2crypto.ssl_get_peer_cert_chain

def sk_x509_num(*args):
  return __m2crypto.sk_x509_num(*args)
sk_x509_num = __m2crypto.sk_x509_num

def sk_x509_value(*args):
  return __m2crypto.sk_x509_value(*args)
sk_x509_value = __m2crypto.sk_x509_value

def i2d_ssl_session(*args):
  return __m2crypto.i2d_ssl_session(*args)
i2d_ssl_session = __m2crypto.i2d_ssl_session

def ssl_session_read_pem(*args):
  return __m2crypto.ssl_session_read_pem(*args)
ssl_session_read_pem = __m2crypto.ssl_session_read_pem

def ssl_session_write_pem(*args):
  return __m2crypto.ssl_session_write_pem(*args)
ssl_session_write_pem = __m2crypto.ssl_session_write_pem

def ssl_ctx_set_session_cache_mode(*args):
  return __m2crypto.ssl_ctx_set_session_cache_mode(*args)
ssl_ctx_set_session_cache_mode = __m2crypto.ssl_ctx_set_session_cache_mode

def ssl_ctx_get_session_cache_mode(*args):
  return __m2crypto.ssl_ctx_get_session_cache_mode(*args)
ssl_ctx_get_session_cache_mode = __m2crypto.ssl_ctx_get_session_cache_mode

def ssl_ctx_set_cache_size(*args):
  return __m2crypto.ssl_ctx_set_cache_size(*args)
ssl_ctx_set_cache_size = __m2crypto.ssl_ctx_set_cache_size

def ssl_is_init_finished(*args):
  return __m2crypto.ssl_is_init_finished(*args)
ssl_is_init_finished = __m2crypto.ssl_is_init_finished

def x509_check_ca(*args):
  return __m2crypto.x509_check_ca(*args)
x509_check_ca = __m2crypto.x509_check_ca

def x509_new():
  return __m2crypto.x509_new()
x509_new = __m2crypto.x509_new

def x509_dup(*args):
  return __m2crypto.x509_dup(*args)
x509_dup = __m2crypto.x509_dup

def x509_free(*args):
  return __m2crypto.x509_free(*args)
x509_free = __m2crypto.x509_free

def x509_crl_free(*args):
  return __m2crypto.x509_crl_free(*args)
x509_crl_free = __m2crypto.x509_crl_free

def x509_crl_new():
  return __m2crypto.x509_crl_new()
x509_crl_new = __m2crypto.x509_crl_new

def x509_print(*args):
  return __m2crypto.x509_print(*args)
x509_print = __m2crypto.x509_print

def x509_crl_print(*args):
  return __m2crypto.x509_crl_print(*args)
x509_crl_print = __m2crypto.x509_crl_print

def x509_get_serial_number(*args):
  return __m2crypto.x509_get_serial_number(*args)
x509_get_serial_number = __m2crypto.x509_get_serial_number

def x509_set_serial_number(*args):
  return __m2crypto.x509_set_serial_number(*args)
x509_set_serial_number = __m2crypto.x509_set_serial_number

def x509_get_pubkey(*args):
  return __m2crypto.x509_get_pubkey(*args)
x509_get_pubkey = __m2crypto.x509_get_pubkey

def x509_set_pubkey(*args):
  return __m2crypto.x509_set_pubkey(*args)
x509_set_pubkey = __m2crypto.x509_set_pubkey

def x509_get_issuer_name(*args):
  return __m2crypto.x509_get_issuer_name(*args)
x509_get_issuer_name = __m2crypto.x509_get_issuer_name

def x509_set_issuer_name(*args):
  return __m2crypto.x509_set_issuer_name(*args)
x509_set_issuer_name = __m2crypto.x509_set_issuer_name

def x509_get_subject_name(*args):
  return __m2crypto.x509_get_subject_name(*args)
x509_get_subject_name = __m2crypto.x509_get_subject_name

def x509_set_subject_name(*args):
  return __m2crypto.x509_set_subject_name(*args)
x509_set_subject_name = __m2crypto.x509_set_subject_name

def x509_cmp_current_time(*args):
  return __m2crypto.x509_cmp_current_time(*args)
x509_cmp_current_time = __m2crypto.x509_cmp_current_time
X509_TRUST_DEFAULT = __m2crypto.X509_TRUST_DEFAULT
X509_TRUST_COMPAT = __m2crypto.X509_TRUST_COMPAT
X509_TRUST_SSL_CLIENT = __m2crypto.X509_TRUST_SSL_CLIENT
X509_TRUST_SSL_SERVER = __m2crypto.X509_TRUST_SSL_SERVER
X509_TRUST_EMAIL = __m2crypto.X509_TRUST_EMAIL
X509_TRUST_OBJECT_SIGN = __m2crypto.X509_TRUST_OBJECT_SIGN
X509_TRUST_OCSP_SIGN = __m2crypto.X509_TRUST_OCSP_SIGN
X509_TRUST_OCSP_REQUEST = __m2crypto.X509_TRUST_OCSP_REQUEST
X509_TRUST_DYNAMIC = __m2crypto.X509_TRUST_DYNAMIC
X509_TRUST_DYNAMIC_NAME = __m2crypto.X509_TRUST_DYNAMIC_NAME
X509_TRUST_TRUSTED = __m2crypto.X509_TRUST_TRUSTED
X509_TRUST_REJECTED = __m2crypto.X509_TRUST_REJECTED
X509_TRUST_UNTRUSTED = __m2crypto.X509_TRUST_UNTRUSTED
X509_PURPOSE_SSL_CLIENT = __m2crypto.X509_PURPOSE_SSL_CLIENT
X509_PURPOSE_SSL_SERVER = __m2crypto.X509_PURPOSE_SSL_SERVER
X509_PURPOSE_NS_SSL_SERVER = __m2crypto.X509_PURPOSE_NS_SSL_SERVER
X509_PURPOSE_SMIME_SIGN = __m2crypto.X509_PURPOSE_SMIME_SIGN
X509_PURPOSE_SMIME_ENCRYPT = __m2crypto.X509_PURPOSE_SMIME_ENCRYPT
X509_PURPOSE_CRL_SIGN = __m2crypto.X509_PURPOSE_CRL_SIGN
X509_PURPOSE_ANY = __m2crypto.X509_PURPOSE_ANY
X509_PURPOSE_OCSP_HELPER = __m2crypto.X509_PURPOSE_OCSP_HELPER

def x509_check_purpose(*args):
  return __m2crypto.x509_check_purpose(*args)
x509_check_purpose = __m2crypto.x509_check_purpose

def x509_check_trust(*args):
  return __m2crypto.x509_check_trust(*args)
x509_check_trust = __m2crypto.x509_check_trust

def x509_write_pem(*args):
  return __m2crypto.x509_write_pem(*args)
x509_write_pem = __m2crypto.x509_write_pem

def x509_write_pem_file(*args):
  return __m2crypto.x509_write_pem_file(*args)
x509_write_pem_file = __m2crypto.x509_write_pem_file

def x509_verify(*args):
  return __m2crypto.x509_verify(*args)
x509_verify = __m2crypto.x509_verify

def x509_get_verify_error(*args):
  return __m2crypto.x509_get_verify_error(*args)
x509_get_verify_error = __m2crypto.x509_get_verify_error
X509V3_EXT_UNKNOWN_MASK = __m2crypto.X509V3_EXT_UNKNOWN_MASK
X509V3_EXT_DEFAULT = __m2crypto.X509V3_EXT_DEFAULT
X509V3_EXT_ERROR_UNKNOWN = __m2crypto.X509V3_EXT_ERROR_UNKNOWN
X509V3_EXT_PARSE_UNKNOWN = __m2crypto.X509V3_EXT_PARSE_UNKNOWN
X509V3_EXT_DUMP_UNKNOWN = __m2crypto.X509V3_EXT_DUMP_UNKNOWN

def x509_add_ext(*args):
  return __m2crypto.x509_add_ext(*args)
x509_add_ext = __m2crypto.x509_add_ext

def x509_get_ext_count(*args):
  return __m2crypto.x509_get_ext_count(*args)
x509_get_ext_count = __m2crypto.x509_get_ext_count

def x509_get_ext(*args):
  return __m2crypto.x509_get_ext(*args)
x509_get_ext = __m2crypto.x509_get_ext

def x509_ext_print(*args):
  return __m2crypto.x509_ext_print(*args)
x509_ext_print = __m2crypto.x509_ext_print

def x509_name_new():
  return __m2crypto.x509_name_new()
x509_name_new = __m2crypto.x509_name_new

def x509_name_free(*args):
  return __m2crypto.x509_name_free(*args)
x509_name_free = __m2crypto.x509_name_free

def x509_name_print(*args):
  return __m2crypto.x509_name_print(*args)
x509_name_print = __m2crypto.x509_name_print

def x509_name_get_entry(*args):
  return __m2crypto.x509_name_get_entry(*args)
x509_name_get_entry = __m2crypto.x509_name_get_entry

def x509_name_entry_count(*args):
  return __m2crypto.x509_name_entry_count(*args)
x509_name_entry_count = __m2crypto.x509_name_entry_count

def x509_name_delete_entry(*args):
  return __m2crypto.x509_name_delete_entry(*args)
x509_name_delete_entry = __m2crypto.x509_name_delete_entry

def x509_name_add_entry(*args):
  return __m2crypto.x509_name_add_entry(*args)
x509_name_add_entry = __m2crypto.x509_name_add_entry

def x509_name_add_entry_by_obj(*args):
  return __m2crypto.x509_name_add_entry_by_obj(*args)
x509_name_add_entry_by_obj = __m2crypto.x509_name_add_entry_by_obj

def x509_name_add_entry_by_nid(*args):
  return __m2crypto.x509_name_add_entry_by_nid(*args)
x509_name_add_entry_by_nid = __m2crypto.x509_name_add_entry_by_nid

def x509_name_print_ex(*args):
  return __m2crypto.x509_name_print_ex(*args)
x509_name_print_ex = __m2crypto.x509_name_print_ex

def x509_name_print_ex_fp(*args):
  return __m2crypto.x509_name_print_ex_fp(*args)
x509_name_print_ex_fp = __m2crypto.x509_name_print_ex_fp

def x509_name_hash(*args):
  return __m2crypto.x509_name_hash(*args)
x509_name_hash = __m2crypto.x509_name_hash

def x509_name_get_index_by_nid(*args):
  return __m2crypto.x509_name_get_index_by_nid(*args)
x509_name_get_index_by_nid = __m2crypto.x509_name_get_index_by_nid

def x509_name_entry_new():
  return __m2crypto.x509_name_entry_new()
x509_name_entry_new = __m2crypto.x509_name_entry_new

def x509_name_entry_free(*args):
  return __m2crypto.x509_name_entry_free(*args)
x509_name_entry_free = __m2crypto.x509_name_entry_free

def x509_name_entry_create_by_nid(*args):
  return __m2crypto.x509_name_entry_create_by_nid(*args)
x509_name_entry_create_by_nid = __m2crypto.x509_name_entry_create_by_nid

def x509_name_entry_set_object(*args):
  return __m2crypto.x509_name_entry_set_object(*args)
x509_name_entry_set_object = __m2crypto.x509_name_entry_set_object

def x509_name_entry_get_object(*args):
  return __m2crypto.x509_name_entry_get_object(*args)
x509_name_entry_get_object = __m2crypto.x509_name_entry_get_object

def x509_name_entry_get_data(*args):
  return __m2crypto.x509_name_entry_get_data(*args)
x509_name_entry_get_data = __m2crypto.x509_name_entry_get_data

def x509_name_entry_set_data(*args):
  return __m2crypto.x509_name_entry_set_data(*args)
x509_name_entry_set_data = __m2crypto.x509_name_entry_set_data

def x509_req_new():
  return __m2crypto.x509_req_new()
x509_req_new = __m2crypto.x509_req_new

def x509_req_free(*args):
  return __m2crypto.x509_req_free(*args)
x509_req_free = __m2crypto.x509_req_free

def x509_req_print(*args):
  return __m2crypto.x509_req_print(*args)
x509_req_print = __m2crypto.x509_req_print

def x509_req_get_pubkey(*args):
  return __m2crypto.x509_req_get_pubkey(*args)
x509_req_get_pubkey = __m2crypto.x509_req_get_pubkey

def x509_req_set_pubkey(*args):
  return __m2crypto.x509_req_set_pubkey(*args)
x509_req_set_pubkey = __m2crypto.x509_req_set_pubkey

def x509_req_set_subject_name(*args):
  return __m2crypto.x509_req_set_subject_name(*args)
x509_req_set_subject_name = __m2crypto.x509_req_set_subject_name

def x509_req_verify(*args):
  return __m2crypto.x509_req_verify(*args)
x509_req_verify = __m2crypto.x509_req_verify

def x509_req_sign(*args):
  return __m2crypto.x509_req_sign(*args)
x509_req_sign = __m2crypto.x509_req_sign

def i2d_x509_bio(*args):
  return __m2crypto.i2d_x509_bio(*args)
i2d_x509_bio = __m2crypto.i2d_x509_bio

def i2d_x509_req_bio(*args):
  return __m2crypto.i2d_x509_req_bio(*args)
i2d_x509_req_bio = __m2crypto.i2d_x509_req_bio

def x509_store_new():
  return __m2crypto.x509_store_new()
x509_store_new = __m2crypto.x509_store_new

def x509_store_free(*args):
  return __m2crypto.x509_store_free(*args)
x509_store_free = __m2crypto.x509_store_free

def x509_store_add_cert(*args):
  return __m2crypto.x509_store_add_cert(*args)
x509_store_add_cert = __m2crypto.x509_store_add_cert

def x509_store_ctx_get_current_cert(*args):
  return __m2crypto.x509_store_ctx_get_current_cert(*args)
x509_store_ctx_get_current_cert = __m2crypto.x509_store_ctx_get_current_cert

def x509_store_ctx_get_error(*args):
  return __m2crypto.x509_store_ctx_get_error(*args)
x509_store_ctx_get_error = __m2crypto.x509_store_ctx_get_error

def x509_store_ctx_get_error_depth(*args):
  return __m2crypto.x509_store_ctx_get_error_depth(*args)
x509_store_ctx_get_error_depth = __m2crypto.x509_store_ctx_get_error_depth

def x509_store_ctx_free(*args):
  return __m2crypto.x509_store_ctx_free(*args)
x509_store_ctx_free = __m2crypto.x509_store_ctx_free

def x509_store_ctx_get1_chain(*args):
  return __m2crypto.x509_store_ctx_get1_chain(*args)
x509_store_ctx_get1_chain = __m2crypto.x509_store_ctx_get1_chain

def x509_extension_get_critical(*args):
  return __m2crypto.x509_extension_get_critical(*args)
x509_extension_get_critical = __m2crypto.x509_extension_get_critical

def x509_extension_set_critical(*args):
  return __m2crypto.x509_extension_set_critical(*args)
x509_extension_set_critical = __m2crypto.x509_extension_set_critical
NID_commonName = __m2crypto.NID_commonName
NID_countryName = __m2crypto.NID_countryName
NID_localityName = __m2crypto.NID_localityName
NID_stateOrProvinceName = __m2crypto.NID_stateOrProvinceName
NID_organizationName = __m2crypto.NID_organizationName
NID_organizationalUnitName = __m2crypto.NID_organizationalUnitName
NID_serialNumber = __m2crypto.NID_serialNumber
NID_surname = __m2crypto.NID_surname
NID_givenName = __m2crypto.NID_givenName
NID_pkcs9_emailAddress = __m2crypto.NID_pkcs9_emailAddress
X509_V_OK = __m2crypto.X509_V_OK
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT = __m2crypto.X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
X509_V_ERR_UNABLE_TO_GET_CRL = __m2crypto.X509_V_ERR_UNABLE_TO_GET_CRL
X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = __m2crypto.X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = __m2crypto.X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = __m2crypto.X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
X509_V_ERR_CERT_SIGNATURE_FAILURE = __m2crypto.X509_V_ERR_CERT_SIGNATURE_FAILURE
X509_V_ERR_CRL_SIGNATURE_FAILURE = __m2crypto.X509_V_ERR_CRL_SIGNATURE_FAILURE
X509_V_ERR_CERT_NOT_YET_VALID = __m2crypto.X509_V_ERR_CERT_NOT_YET_VALID
X509_V_ERR_CERT_HAS_EXPIRED = __m2crypto.X509_V_ERR_CERT_HAS_EXPIRED
X509_V_ERR_CRL_NOT_YET_VALID = __m2crypto.X509_V_ERR_CRL_NOT_YET_VALID
X509_V_ERR_CRL_HAS_EXPIRED = __m2crypto.X509_V_ERR_CRL_HAS_EXPIRED
X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD = __m2crypto.X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD = __m2crypto.X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD = __m2crypto.X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = __m2crypto.X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
X509_V_ERR_OUT_OF_MEM = __m2crypto.X509_V_ERR_OUT_OF_MEM
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT = __m2crypto.X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN = __m2crypto.X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = __m2crypto.X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = __m2crypto.X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
X509_V_ERR_CERT_CHAIN_TOO_LONG = __m2crypto.X509_V_ERR_CERT_CHAIN_TOO_LONG
X509_V_ERR_CERT_REVOKED = __m2crypto.X509_V_ERR_CERT_REVOKED
X509_V_ERR_INVALID_CA = __m2crypto.X509_V_ERR_INVALID_CA
X509_V_ERR_PATH_LENGTH_EXCEEDED = __m2crypto.X509_V_ERR_PATH_LENGTH_EXCEEDED
X509_V_ERR_INVALID_PURPOSE = __m2crypto.X509_V_ERR_INVALID_PURPOSE
X509_V_ERR_CERT_UNTRUSTED = __m2crypto.X509_V_ERR_CERT_UNTRUSTED
X509_V_ERR_CERT_REJECTED = __m2crypto.X509_V_ERR_CERT_REJECTED
X509_V_ERR_APPLICATION_VERIFICATION = __m2crypto.X509_V_ERR_APPLICATION_VERIFICATION
XN_FLAG_COMPAT = __m2crypto.XN_FLAG_COMPAT
XN_FLAG_SEP_COMMA_PLUS = __m2crypto.XN_FLAG_SEP_COMMA_PLUS
XN_FLAG_SEP_CPLUS_SPC = __m2crypto.XN_FLAG_SEP_CPLUS_SPC
XN_FLAG_SEP_MULTILINE = __m2crypto.XN_FLAG_SEP_MULTILINE
XN_FLAG_DN_REV = __m2crypto.XN_FLAG_DN_REV
XN_FLAG_FN_LN = __m2crypto.XN_FLAG_FN_LN
XN_FLAG_SPC_EQ = __m2crypto.XN_FLAG_SPC_EQ
XN_FLAG_DUMP_UNKNOWN_FIELDS = __m2crypto.XN_FLAG_DUMP_UNKNOWN_FIELDS
XN_FLAG_FN_ALIGN = __m2crypto.XN_FLAG_FN_ALIGN
XN_FLAG_ONELINE = __m2crypto.XN_FLAG_ONELINE
XN_FLAG_MULTILINE = __m2crypto.XN_FLAG_MULTILINE
XN_FLAG_RFC2253 = __m2crypto.XN_FLAG_RFC2253
RSA_3 = __m2crypto.RSA_3
RSA_F4 = __m2crypto.RSA_F4

def x509_init(*args):
  return __m2crypto.x509_init(*args)
x509_init = __m2crypto.x509_init

def x509_read_pem(*args):
  return __m2crypto.x509_read_pem(*args)
x509_read_pem = __m2crypto.x509_read_pem

def d2i_x509(*args):
  return __m2crypto.d2i_x509(*args)
d2i_x509 = __m2crypto.d2i_x509

def d2i_x509_req(*args):
  return __m2crypto.d2i_x509_req(*args)
d2i_x509_req = __m2crypto.d2i_x509_req

def i2d_x509(*args):
  return __m2crypto.i2d_x509(*args)
i2d_x509 = __m2crypto.i2d_x509

def x509_req_read_pem(*args):
  return __m2crypto.x509_req_read_pem(*args)
x509_req_read_pem = __m2crypto.x509_req_read_pem

def x509_req_write_pem(*args):
  return __m2crypto.x509_req_write_pem(*args)
x509_req_write_pem = __m2crypto.x509_req_write_pem

def x509_crl_read_pem(*args):
  return __m2crypto.x509_crl_read_pem(*args)
x509_crl_read_pem = __m2crypto.x509_crl_read_pem

def x509_set_version(*args):
  return __m2crypto.x509_set_version(*args)
x509_set_version = __m2crypto.x509_set_version

def x509_get_version(*args):
  return __m2crypto.x509_get_version(*args)
x509_get_version = __m2crypto.x509_get_version

def x509_set_not_before(*args):
  return __m2crypto.x509_set_not_before(*args)
x509_set_not_before = __m2crypto.x509_set_not_before

def x509_get_not_before(*args):
  return __m2crypto.x509_get_not_before(*args)
x509_get_not_before = __m2crypto.x509_get_not_before

def x509_set_not_after(*args):
  return __m2crypto.x509_set_not_after(*args)
x509_set_not_after = __m2crypto.x509_set_not_after

def x509_get_not_after(*args):
  return __m2crypto.x509_get_not_after(*args)
x509_get_not_after = __m2crypto.x509_get_not_after

def x509_sign(*args):
  return __m2crypto.x509_sign(*args)
x509_sign = __m2crypto.x509_sign

def x509_gmtime_adj(*args):
  return __m2crypto.x509_gmtime_adj(*args)
x509_gmtime_adj = __m2crypto.x509_gmtime_adj

def x509_name_by_nid(*args):
  return __m2crypto.x509_name_by_nid(*args)
x509_name_by_nid = __m2crypto.x509_name_by_nid

def x509_name_set_by_nid(*args):
  return __m2crypto.x509_name_set_by_nid(*args)
x509_name_set_by_nid = __m2crypto.x509_name_set_by_nid

def x509_name_add_entry_by_txt(*args):
  return __m2crypto.x509_name_add_entry_by_txt(*args)
x509_name_add_entry_by_txt = __m2crypto.x509_name_add_entry_by_txt

def x509_name_get_der(*args):
  return __m2crypto.x509_name_get_der(*args)
x509_name_get_der = __m2crypto.x509_name_get_der

def sk_x509_new_null():
  return __m2crypto.sk_x509_new_null()
sk_x509_new_null = __m2crypto.sk_x509_new_null

def sk_x509_free(*args):
  return __m2crypto.sk_x509_free(*args)
sk_x509_free = __m2crypto.sk_x509_free

def sk_x509_push(*args):
  return __m2crypto.sk_x509_push(*args)
sk_x509_push = __m2crypto.sk_x509_push

def sk_x509_pop(*args):
  return __m2crypto.sk_x509_pop(*args)
sk_x509_pop = __m2crypto.sk_x509_pop

def x509_store_load_locations(*args):
  return __m2crypto.x509_store_load_locations(*args)
x509_store_load_locations = __m2crypto.x509_store_load_locations

def x509_type_check(*args):
  return __m2crypto.x509_type_check(*args)
x509_type_check = __m2crypto.x509_type_check

def x509_name_type_check(*args):
  return __m2crypto.x509_name_type_check(*args)
x509_name_type_check = __m2crypto.x509_name_type_check

def x509_req_get_subject_name(*args):
  return __m2crypto.x509_req_get_subject_name(*args)
x509_req_get_subject_name = __m2crypto.x509_req_get_subject_name

def x509_req_get_version(*args):
  return __m2crypto.x509_req_get_version(*args)
x509_req_get_version = __m2crypto.x509_req_get_version

def x509_req_set_version(*args):
  return __m2crypto.x509_req_set_version(*args)
x509_req_set_version = __m2crypto.x509_req_set_version

def x509_req_add_extensions(*args):
  return __m2crypto.x509_req_add_extensions(*args)
x509_req_add_extensions = __m2crypto.x509_req_add_extensions

def x509_name_entry_create_by_txt(*args):
  return __m2crypto.x509_name_entry_create_by_txt(*args)
x509_name_entry_create_by_txt = __m2crypto.x509_name_entry_create_by_txt

def x509v3_lhash():
  return __m2crypto.x509v3_lhash()
x509v3_lhash = __m2crypto.x509v3_lhash

def x509v3_set_conf_lhash(*args):
  return __m2crypto.x509v3_set_conf_lhash(*args)
x509v3_set_conf_lhash = __m2crypto.x509v3_set_conf_lhash

def x509v3_ext_conf(*args):
  return __m2crypto.x509v3_ext_conf(*args)
x509v3_ext_conf = __m2crypto.x509v3_ext_conf

def x509_extension_free(*args):
  return __m2crypto.x509_extension_free(*args)
x509_extension_free = __m2crypto.x509_extension_free

def x509_extension_get_name(*args):
  return __m2crypto.x509_extension_get_name(*args)
x509_extension_get_name = __m2crypto.x509_extension_get_name

def sk_x509_extension_new_null():
  return __m2crypto.sk_x509_extension_new_null()
sk_x509_extension_new_null = __m2crypto.sk_x509_extension_new_null

def sk_x509_extension_free(*args):
  return __m2crypto.sk_x509_extension_free(*args)
sk_x509_extension_free = __m2crypto.sk_x509_extension_free

def sk_x509_extension_push(*args):
  return __m2crypto.sk_x509_extension_push(*args)
sk_x509_extension_push = __m2crypto.sk_x509_extension_push

def sk_x509_extension_pop(*args):
  return __m2crypto.sk_x509_extension_pop(*args)
sk_x509_extension_pop = __m2crypto.sk_x509_extension_pop

def sk_x509_extension_num(*args):
  return __m2crypto.sk_x509_extension_num(*args)
sk_x509_extension_num = __m2crypto.sk_x509_extension_num

def sk_x509_extension_value(*args):
  return __m2crypto.sk_x509_extension_value(*args)
sk_x509_extension_value = __m2crypto.sk_x509_extension_value

def x509_store_ctx_get_app_data(*args):
  return __m2crypto.x509_store_ctx_get_app_data(*args)
x509_store_ctx_get_app_data = __m2crypto.x509_store_ctx_get_app_data

def make_stack_from_der_sequence(*args):
  return __m2crypto.make_stack_from_der_sequence(*args)
make_stack_from_der_sequence = __m2crypto.make_stack_from_der_sequence

def get_der_encoding_stack(*args):
  return __m2crypto.get_der_encoding_stack(*args)
get_der_encoding_stack = __m2crypto.get_der_encoding_stack

def x509_name_oneline(*args):
  return __m2crypto.x509_name_oneline(*args)
x509_name_oneline = __m2crypto.x509_name_oneline

def asn1_object_new():
  return __m2crypto.asn1_object_new()
asn1_object_new = __m2crypto.asn1_object_new

def asn1_object_create(*args):
  return __m2crypto.asn1_object_create(*args)
asn1_object_create = __m2crypto.asn1_object_create

def asn1_object_free(*args):
  return __m2crypto.asn1_object_free(*args)
asn1_object_free = __m2crypto.asn1_object_free

def i2d_asn1_object(*args):
  return __m2crypto.i2d_asn1_object(*args)
i2d_asn1_object = __m2crypto.i2d_asn1_object

def c2i_asn1_object(*args):
  return __m2crypto.c2i_asn1_object(*args)
c2i_asn1_object = __m2crypto.c2i_asn1_object

def d2i_asn1_object(*args):
  return __m2crypto.d2i_asn1_object(*args)
d2i_asn1_object = __m2crypto.d2i_asn1_object

def asn1_bit_string_new():
  return __m2crypto.asn1_bit_string_new()
asn1_bit_string_new = __m2crypto.asn1_bit_string_new

def asn1_string_new():
  return __m2crypto.asn1_string_new()
asn1_string_new = __m2crypto.asn1_string_new

def asn1_string_free(*args):
  return __m2crypto.asn1_string_free(*args)
asn1_string_free = __m2crypto.asn1_string_free

def asn1_string_set(*args):
  return __m2crypto.asn1_string_set(*args)
asn1_string_set = __m2crypto.asn1_string_set

def asn1_string_print(*args):
  return __m2crypto.asn1_string_print(*args)
asn1_string_print = __m2crypto.asn1_string_print

def asn1_string_print_ex(*args):
  return __m2crypto.asn1_string_print_ex(*args)
asn1_string_print_ex = __m2crypto.asn1_string_print_ex

def asn1_utctime_new():
  return __m2crypto.asn1_utctime_new()
asn1_utctime_new = __m2crypto.asn1_utctime_new

def asn1_utctime_free(*args):
  return __m2crypto.asn1_utctime_free(*args)
asn1_utctime_free = __m2crypto.asn1_utctime_free

def asn1_utctime_check(*args):
  return __m2crypto.asn1_utctime_check(*args)
asn1_utctime_check = __m2crypto.asn1_utctime_check

def asn1_utctime_set(*args):
  return __m2crypto.asn1_utctime_set(*args)
asn1_utctime_set = __m2crypto.asn1_utctime_set

def asn1_utctime_set_string(*args):
  return __m2crypto.asn1_utctime_set_string(*args)
asn1_utctime_set_string = __m2crypto.asn1_utctime_set_string

def asn1_utctime_print(*args):
  return __m2crypto.asn1_utctime_print(*args)
asn1_utctime_print = __m2crypto.asn1_utctime_print

def asn1_integer_new():
  return __m2crypto.asn1_integer_new()
asn1_integer_new = __m2crypto.asn1_integer_new

def asn1_integer_free(*args):
  return __m2crypto.asn1_integer_free(*args)
asn1_integer_free = __m2crypto.asn1_integer_free

def asn1_integer_cmp(*args):
  return __m2crypto.asn1_integer_cmp(*args)
asn1_integer_cmp = __m2crypto.asn1_integer_cmp
ASN1_STRFLGS_ESC_2253 = __m2crypto.ASN1_STRFLGS_ESC_2253
ASN1_STRFLGS_ESC_CTRL = __m2crypto.ASN1_STRFLGS_ESC_CTRL
ASN1_STRFLGS_ESC_MSB = __m2crypto.ASN1_STRFLGS_ESC_MSB
ASN1_STRFLGS_ESC_QUOTE = __m2crypto.ASN1_STRFLGS_ESC_QUOTE
ASN1_STRFLGS_UTF8_CONVERT = __m2crypto.ASN1_STRFLGS_UTF8_CONVERT
ASN1_STRFLGS_DUMP_UNKNOWN = __m2crypto.ASN1_STRFLGS_DUMP_UNKNOWN
ASN1_STRFLGS_DUMP_DER = __m2crypto.ASN1_STRFLGS_DUMP_DER
ASN1_STRFLGS_RFC2253 = __m2crypto.ASN1_STRFLGS_RFC2253

def asn1_utctime_type_check(*args):
  return __m2crypto.asn1_utctime_type_check(*args)
asn1_utctime_type_check = __m2crypto.asn1_utctime_type_check

def asn1_integer_get(*args):
  return __m2crypto.asn1_integer_get(*args)
asn1_integer_get = __m2crypto.asn1_integer_get

def asn1_integer_set(*args):
  return __m2crypto.asn1_integer_set(*args)
asn1_integer_set = __m2crypto.asn1_integer_set

def pkcs7_new():
  return __m2crypto.pkcs7_new()
pkcs7_new = __m2crypto.pkcs7_new

def pkcs7_free(*args):
  return __m2crypto.pkcs7_free(*args)
pkcs7_free = __m2crypto.pkcs7_free

def pkcs7_add_certificate(*args):
  return __m2crypto.pkcs7_add_certificate(*args)
pkcs7_add_certificate = __m2crypto.pkcs7_add_certificate
PKCS7_TEXT = __m2crypto.PKCS7_TEXT
PKCS7_NOCERTS = __m2crypto.PKCS7_NOCERTS
PKCS7_NOSIGS = __m2crypto.PKCS7_NOSIGS
PKCS7_NOCHAIN = __m2crypto.PKCS7_NOCHAIN
PKCS7_NOINTERN = __m2crypto.PKCS7_NOINTERN
PKCS7_NOVERIFY = __m2crypto.PKCS7_NOVERIFY
PKCS7_DETACHED = __m2crypto.PKCS7_DETACHED
PKCS7_BINARY = __m2crypto.PKCS7_BINARY
PKCS7_NOATTR = __m2crypto.PKCS7_NOATTR
PKCS7_SIGNED = __m2crypto.PKCS7_SIGNED
PKCS7_ENVELOPED = __m2crypto.PKCS7_ENVELOPED
PKCS7_SIGNED_ENVELOPED = __m2crypto.PKCS7_SIGNED_ENVELOPED
PKCS7_DATA = __m2crypto.PKCS7_DATA

def pkcs7_init(*args):
  return __m2crypto.pkcs7_init(*args)
pkcs7_init = __m2crypto.pkcs7_init

def smime_init(*args):
  return __m2crypto.smime_init(*args)
smime_init = __m2crypto.smime_init

def pkcs7_encrypt(*args):
  return __m2crypto.pkcs7_encrypt(*args)
pkcs7_encrypt = __m2crypto.pkcs7_encrypt

def pkcs7_decrypt(*args):
  return __m2crypto.pkcs7_decrypt(*args)
pkcs7_decrypt = __m2crypto.pkcs7_decrypt

def pkcs7_sign0(*args):
  return __m2crypto.pkcs7_sign0(*args)
pkcs7_sign0 = __m2crypto.pkcs7_sign0

def pkcs7_sign1(*args):
  return __m2crypto.pkcs7_sign1(*args)
pkcs7_sign1 = __m2crypto.pkcs7_sign1

def pkcs7_verify1(*args):
  return __m2crypto.pkcs7_verify1(*args)
pkcs7_verify1 = __m2crypto.pkcs7_verify1

def pkcs7_verify0(*args):
  return __m2crypto.pkcs7_verify0(*args)
pkcs7_verify0 = __m2crypto.pkcs7_verify0

def smime_write_pkcs7_multi(*args):
  return __m2crypto.smime_write_pkcs7_multi(*args)
smime_write_pkcs7_multi = __m2crypto.smime_write_pkcs7_multi

def smime_write_pkcs7(*args):
  return __m2crypto.smime_write_pkcs7(*args)
smime_write_pkcs7 = __m2crypto.smime_write_pkcs7

def smime_read_pkcs7(*args):
  return __m2crypto.smime_read_pkcs7(*args)
smime_read_pkcs7 = __m2crypto.smime_read_pkcs7

def i2d_pkcs7_bio(*args):
  return __m2crypto.i2d_pkcs7_bio(*args)
i2d_pkcs7_bio = __m2crypto.i2d_pkcs7_bio

def pkcs7_read_bio(*args):
  return __m2crypto.pkcs7_read_bio(*args)
pkcs7_read_bio = __m2crypto.pkcs7_read_bio

def pkcs7_read_bio_der(*args):
  return __m2crypto.pkcs7_read_bio_der(*args)
pkcs7_read_bio_der = __m2crypto.pkcs7_read_bio_der

def pkcs7_write_bio(*args):
  return __m2crypto.pkcs7_write_bio(*args)
pkcs7_write_bio = __m2crypto.pkcs7_write_bio

def pkcs7_write_bio_der(*args):
  return __m2crypto.pkcs7_write_bio_der(*args)
pkcs7_write_bio_der = __m2crypto.pkcs7_write_bio_der

def pkcs7_type_nid(*args):
  return __m2crypto.pkcs7_type_nid(*args)
pkcs7_type_nid = __m2crypto.pkcs7_type_nid

def pkcs7_type_sn(*args):
  return __m2crypto.pkcs7_type_sn(*args)
pkcs7_type_sn = __m2crypto.pkcs7_type_sn

def smime_crlf_copy(*args):
  return __m2crypto.smime_crlf_copy(*args)
smime_crlf_copy = __m2crypto.smime_crlf_copy

def pkcs7_get0_signers(*args):
  return __m2crypto.pkcs7_get0_signers(*args)
pkcs7_get0_signers = __m2crypto.pkcs7_get0_signers

def util_init(*args):
  return __m2crypto.util_init(*args)
util_init = __m2crypto.util_init

def util_hex_to_string(*args):
  return __m2crypto.util_hex_to_string(*args)
util_hex_to_string = __m2crypto.util_hex_to_string

def util_string_to_hex(*args):
  return __m2crypto.util_string_to_hex(*args)
util_string_to_hex = __m2crypto.util_string_to_hex
OPENSSL_NO_EC = __m2crypto.OPENSSL_NO_EC

def ec_key_new():
  return __m2crypto.ec_key_new()
ec_key_new = __m2crypto.ec_key_new

def ec_key_free(*args):
  return __m2crypto.ec_key_free(*args)
ec_key_free = __m2crypto.ec_key_free

def ec_key_size(*args):
  return __m2crypto.ec_key_size(*args)
ec_key_size = __m2crypto.ec_key_size

def ec_key_gen_key(*args):
  return __m2crypto.ec_key_gen_key(*args)
ec_key_gen_key = __m2crypto.ec_key_gen_key

def ec_key_check_key(*args):
  return __m2crypto.ec_key_check_key(*args)
ec_key_check_key = __m2crypto.ec_key_check_key
NID_secp112r1 = __m2crypto.NID_secp112r1
NID_secp112r2 = __m2crypto.NID_secp112r2
NID_secp128r1 = __m2crypto.NID_secp128r1
NID_secp128r2 = __m2crypto.NID_secp128r2
NID_secp160k1 = __m2crypto.NID_secp160k1
NID_secp160r1 = __m2crypto.NID_secp160r1
NID_secp160r2 = __m2crypto.NID_secp160r2
NID_secp192k1 = __m2crypto.NID_secp192k1
NID_secp224k1 = __m2crypto.NID_secp224k1
NID_secp224r1 = __m2crypto.NID_secp224r1
NID_secp256k1 = __m2crypto.NID_secp256k1
NID_secp384r1 = __m2crypto.NID_secp384r1
NID_secp521r1 = __m2crypto.NID_secp521r1
NID_sect113r1 = __m2crypto.NID_sect113r1
NID_sect113r2 = __m2crypto.NID_sect113r2
NID_sect131r1 = __m2crypto.NID_sect131r1
NID_sect131r2 = __m2crypto.NID_sect131r2
NID_sect163k1 = __m2crypto.NID_sect163k1
NID_sect163r1 = __m2crypto.NID_sect163r1
NID_sect163r2 = __m2crypto.NID_sect163r2
NID_sect193r1 = __m2crypto.NID_sect193r1
NID_sect193r2 = __m2crypto.NID_sect193r2
NID_sect233k1 = __m2crypto.NID_sect233k1
NID_sect233r1 = __m2crypto.NID_sect233r1
NID_sect239k1 = __m2crypto.NID_sect239k1
NID_sect283k1 = __m2crypto.NID_sect283k1
NID_sect283r1 = __m2crypto.NID_sect283r1
NID_sect409k1 = __m2crypto.NID_sect409k1
NID_sect409r1 = __m2crypto.NID_sect409r1
NID_sect571k1 = __m2crypto.NID_sect571k1
NID_sect571r1 = __m2crypto.NID_sect571r1
NID_X9_62_prime192v1 = __m2crypto.NID_X9_62_prime192v1
NID_X9_62_prime192v2 = __m2crypto.NID_X9_62_prime192v2
NID_X9_62_prime192v3 = __m2crypto.NID_X9_62_prime192v3
NID_X9_62_prime239v1 = __m2crypto.NID_X9_62_prime239v1
NID_X9_62_prime239v2 = __m2crypto.NID_X9_62_prime239v2
NID_X9_62_prime239v3 = __m2crypto.NID_X9_62_prime239v3
NID_X9_62_prime256v1 = __m2crypto.NID_X9_62_prime256v1
NID_X9_62_c2pnb163v1 = __m2crypto.NID_X9_62_c2pnb163v1
NID_X9_62_c2pnb163v2 = __m2crypto.NID_X9_62_c2pnb163v2
NID_X9_62_c2pnb163v3 = __m2crypto.NID_X9_62_c2pnb163v3
NID_X9_62_c2pnb176v1 = __m2crypto.NID_X9_62_c2pnb176v1
NID_X9_62_c2tnb191v1 = __m2crypto.NID_X9_62_c2tnb191v1
NID_X9_62_c2tnb191v2 = __m2crypto.NID_X9_62_c2tnb191v2
NID_X9_62_c2tnb191v3 = __m2crypto.NID_X9_62_c2tnb191v3
NID_X9_62_c2pnb208w1 = __m2crypto.NID_X9_62_c2pnb208w1
NID_X9_62_c2tnb239v1 = __m2crypto.NID_X9_62_c2tnb239v1
NID_X9_62_c2tnb239v2 = __m2crypto.NID_X9_62_c2tnb239v2
NID_X9_62_c2tnb239v3 = __m2crypto.NID_X9_62_c2tnb239v3
NID_X9_62_c2pnb272w1 = __m2crypto.NID_X9_62_c2pnb272w1
NID_X9_62_c2pnb304w1 = __m2crypto.NID_X9_62_c2pnb304w1
NID_X9_62_c2tnb359v1 = __m2crypto.NID_X9_62_c2tnb359v1
NID_X9_62_c2pnb368w1 = __m2crypto.NID_X9_62_c2pnb368w1
NID_X9_62_c2tnb431r1 = __m2crypto.NID_X9_62_c2tnb431r1
NID_wap_wsg_idm_ecid_wtls1 = __m2crypto.NID_wap_wsg_idm_ecid_wtls1
NID_wap_wsg_idm_ecid_wtls3 = __m2crypto.NID_wap_wsg_idm_ecid_wtls3
NID_wap_wsg_idm_ecid_wtls4 = __m2crypto.NID_wap_wsg_idm_ecid_wtls4
NID_wap_wsg_idm_ecid_wtls5 = __m2crypto.NID_wap_wsg_idm_ecid_wtls5
NID_wap_wsg_idm_ecid_wtls6 = __m2crypto.NID_wap_wsg_idm_ecid_wtls6
NID_wap_wsg_idm_ecid_wtls7 = __m2crypto.NID_wap_wsg_idm_ecid_wtls7
NID_wap_wsg_idm_ecid_wtls8 = __m2crypto.NID_wap_wsg_idm_ecid_wtls8
NID_wap_wsg_idm_ecid_wtls9 = __m2crypto.NID_wap_wsg_idm_ecid_wtls9
NID_wap_wsg_idm_ecid_wtls10 = __m2crypto.NID_wap_wsg_idm_ecid_wtls10
NID_wap_wsg_idm_ecid_wtls11 = __m2crypto.NID_wap_wsg_idm_ecid_wtls11
NID_wap_wsg_idm_ecid_wtls12 = __m2crypto.NID_wap_wsg_idm_ecid_wtls12
NID_ipsec3 = __m2crypto.NID_ipsec3
NID_ipsec4 = __m2crypto.NID_ipsec4

def ec_init(*args):
  return __m2crypto.ec_init(*args)
ec_init = __m2crypto.ec_init

def ec_key_new_by_curve_name(*args):
  return __m2crypto.ec_key_new_by_curve_name(*args)
ec_key_new_by_curve_name = __m2crypto.ec_key_new_by_curve_name

def ec_key_get_public_der(*args):
  return __m2crypto.ec_key_get_public_der(*args)
ec_key_get_public_der = __m2crypto.ec_key_get_public_der

def ec_key_read_pubkey(*args):
  return __m2crypto.ec_key_read_pubkey(*args)
ec_key_read_pubkey = __m2crypto.ec_key_read_pubkey

def ec_key_write_pubkey(*args):
  return __m2crypto.ec_key_write_pubkey(*args)
ec_key_write_pubkey = __m2crypto.ec_key_write_pubkey

def ec_key_read_bio(*args):
  return __m2crypto.ec_key_read_bio(*args)
ec_key_read_bio = __m2crypto.ec_key_read_bio

def ec_key_write_bio(*args):
  return __m2crypto.ec_key_write_bio(*args)
ec_key_write_bio = __m2crypto.ec_key_write_bio

def ec_key_write_bio_no_cipher(*args):
  return __m2crypto.ec_key_write_bio_no_cipher(*args)
ec_key_write_bio_no_cipher = __m2crypto.ec_key_write_bio_no_cipher

def ecdsa_sig_get_r(*args):
  return __m2crypto.ecdsa_sig_get_r(*args)
ecdsa_sig_get_r = __m2crypto.ecdsa_sig_get_r

def ecdsa_sig_get_s(*args):
  return __m2crypto.ecdsa_sig_get_s(*args)
ecdsa_sig_get_s = __m2crypto.ecdsa_sig_get_s

def ecdsa_sign(*args):
  return __m2crypto.ecdsa_sign(*args)
ecdsa_sign = __m2crypto.ecdsa_sign

def ecdsa_verify(*args):
  return __m2crypto.ecdsa_verify(*args)
ecdsa_verify = __m2crypto.ecdsa_verify

def ecdsa_sign_asn1(*args):
  return __m2crypto.ecdsa_sign_asn1(*args)
ecdsa_sign_asn1 = __m2crypto.ecdsa_sign_asn1

def ecdsa_verify_asn1(*args):
  return __m2crypto.ecdsa_verify_asn1(*args)
ecdsa_verify_asn1 = __m2crypto.ecdsa_verify_asn1

def ecdh_compute_key(*args):
  return __m2crypto.ecdh_compute_key(*args)
ecdh_compute_key = __m2crypto.ecdh_compute_key

def ec_key_from_pubkey_der(*args):
  return __m2crypto.ec_key_from_pubkey_der(*args)
ec_key_from_pubkey_der = __m2crypto.ec_key_from_pubkey_der

def ec_key_keylen(*args):
  return __m2crypto.ec_key_keylen(*args)
ec_key_keylen = __m2crypto.ec_key_keylen

def ec_key_type_check(*args):
  return __m2crypto.ec_key_type_check(*args)
ec_key_type_check = __m2crypto.ec_key_type_check

def engine_load_builtin_engines():
  return __m2crypto.engine_load_builtin_engines()
engine_load_builtin_engines = __m2crypto.engine_load_builtin_engines

def engine_load_dynamic():
  return __m2crypto.engine_load_dynamic()
engine_load_dynamic = __m2crypto.engine_load_dynamic

def engine_load_openssl():
  return __m2crypto.engine_load_openssl()
engine_load_openssl = __m2crypto.engine_load_openssl

def engine_cleanup():
  return __m2crypto.engine_cleanup()
engine_cleanup = __m2crypto.engine_cleanup

def engine_new():
  return __m2crypto.engine_new()
engine_new = __m2crypto.engine_new

def engine_by_id(*args):
  return __m2crypto.engine_by_id(*args)
engine_by_id = __m2crypto.engine_by_id

def engine_free(*args):
  return __m2crypto.engine_free(*args)
engine_free = __m2crypto.engine_free

def engine_init(*args):
  return __m2crypto.engine_init(*args)
engine_init = __m2crypto.engine_init

def engine_finish(*args):
  return __m2crypto.engine_finish(*args)
engine_finish = __m2crypto.engine_finish

def engine_get_id(*args):
  return __m2crypto.engine_get_id(*args)
engine_get_id = __m2crypto.engine_get_id

def engine_get_name(*args):
  return __m2crypto.engine_get_name(*args)
engine_get_name = __m2crypto.engine_get_name

def engine_ctrl_cmd_string(*args):
  return __m2crypto.engine_ctrl_cmd_string(*args)
engine_ctrl_cmd_string = __m2crypto.engine_ctrl_cmd_string

def ui_openssl():
  return __m2crypto.ui_openssl()
ui_openssl = __m2crypto.ui_openssl
class _cbd_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cbd_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cbd_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = __m2crypto._cbd_t_password_set
    __swig_getmethods__["password"] = __m2crypto._cbd_t_password_get
    if _newclass:password = _swig_property(__m2crypto._cbd_t_password_get, __m2crypto._cbd_t_password_set)
    __swig_setmethods__["prompt"] = __m2crypto._cbd_t_prompt_set
    __swig_getmethods__["prompt"] = __m2crypto._cbd_t_prompt_get
    if _newclass:prompt = _swig_property(__m2crypto._cbd_t_prompt_get, __m2crypto._cbd_t_prompt_set)
    def __init__(self): 
        this = __m2crypto.new__cbd_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = __m2crypto.delete__cbd_t
    __del__ = lambda self : None;
_cbd_t_swigregister = __m2crypto._cbd_t_swigregister
_cbd_t_swigregister(_cbd_t)
cvar = __m2crypto.cvar


def engine_pkcs11_data_new(*args):
  return __m2crypto.engine_pkcs11_data_new(*args)
engine_pkcs11_data_new = __m2crypto.engine_pkcs11_data_new

def engine_pkcs11_data_free(*args):
  return __m2crypto.engine_pkcs11_data_free(*args)
engine_pkcs11_data_free = __m2crypto.engine_pkcs11_data_free

def engine_load_private_key(*args):
  return __m2crypto.engine_load_private_key(*args)
engine_load_private_key = __m2crypto.engine_load_private_key

def engine_load_public_key(*args):
  return __m2crypto.engine_load_public_key(*args)
engine_load_public_key = __m2crypto.engine_load_public_key

def engine_init_error(*args):
  return __m2crypto.engine_init_error(*args)
engine_init_error = __m2crypto.engine_init_error

def engine_load_certificate(*args):
  return __m2crypto.engine_load_certificate(*args)
engine_load_certificate = __m2crypto.engine_load_certificate
ENGINE_METHOD_RSA = __m2crypto.ENGINE_METHOD_RSA
ENGINE_METHOD_DSA = __m2crypto.ENGINE_METHOD_DSA
ENGINE_METHOD_DH = __m2crypto.ENGINE_METHOD_DH
ENGINE_METHOD_RAND = __m2crypto.ENGINE_METHOD_RAND
ENGINE_METHOD_ECDH = __m2crypto.ENGINE_METHOD_ECDH
ENGINE_METHOD_ECDSA = __m2crypto.ENGINE_METHOD_ECDSA
ENGINE_METHOD_CIPHERS = __m2crypto.ENGINE_METHOD_CIPHERS
ENGINE_METHOD_DIGESTS = __m2crypto.ENGINE_METHOD_DIGESTS
ENGINE_METHOD_STORE = __m2crypto.ENGINE_METHOD_STORE
ENGINE_METHOD_ALL = __m2crypto.ENGINE_METHOD_ALL
ENGINE_METHOD_NONE = __m2crypto.ENGINE_METHOD_NONE

def engine_set_default(*args):
  return __m2crypto.engine_set_default(*args)
engine_set_default = __m2crypto.engine_set_default

def obj_nid2obj(*args):
  return __m2crypto.obj_nid2obj(*args)
obj_nid2obj = __m2crypto.obj_nid2obj

def obj_nid2ln(*args):
  return __m2crypto.obj_nid2ln(*args)
obj_nid2ln = __m2crypto.obj_nid2ln

def obj_nid2sn(*args):
  return __m2crypto.obj_nid2sn(*args)
obj_nid2sn = __m2crypto.obj_nid2sn

def obj_obj2nid(*args):
  return __m2crypto.obj_obj2nid(*args)
obj_obj2nid = __m2crypto.obj_obj2nid

def obj_ln2nid(*args):
  return __m2crypto.obj_ln2nid(*args)
obj_ln2nid = __m2crypto.obj_ln2nid

def obj_sn2nid(*args):
  return __m2crypto.obj_sn2nid(*args)
obj_sn2nid = __m2crypto.obj_sn2nid

def obj_txt2nid(*args):
  return __m2crypto.obj_txt2nid(*args)
obj_txt2nid = __m2crypto.obj_txt2nid

def obj_txt2obj(*args):
  return __m2crypto.obj_txt2obj(*args)
obj_txt2obj = __m2crypto.obj_txt2obj

def _obj_obj2txt(*args):
  return __m2crypto._obj_obj2txt(*args)
_obj_obj2txt = __m2crypto._obj_obj2txt

def obj_obj2txt(*args):
  return __m2crypto.obj_obj2txt(*args)
obj_obj2txt = __m2crypto.obj_obj2txt
encrypt = __m2crypto.encrypt
decrypt = __m2crypto.decrypt
# This file is compatible with both classic and new-style classes.


